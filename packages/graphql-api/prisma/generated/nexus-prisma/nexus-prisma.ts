/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      EmailAddress: EmailAddressObject
      ContactMetadata: ContactMetadataObject
      EmailAddressConnection: EmailAddressConnectionObject
      PageInfo: PageInfoObject
      EmailAddressEdge: EmailAddressEdgeObject
      AggregateEmailAddress: AggregateEmailAddressObject
      PhoneNumber: PhoneNumberObject
      PhoneNumberConnection: PhoneNumberConnectionObject
      PhoneNumberEdge: PhoneNumberEdgeObject
      AggregatePhoneNumber: AggregatePhoneNumberObject
      ExternalLink: ExternalLinkObject
      ExternalLinkConnection: ExternalLinkConnectionObject
      ExternalLinkEdge: ExternalLinkEdgeObject
      AggregateExternalLink: AggregateExternalLinkObject
      ContactMetadataConnection: ContactMetadataConnectionObject
      ContactMetadataEdge: ContactMetadataEdgeObject
      AggregateContactMetadata: AggregateContactMetadataObject
      Location: LocationObject
      Geometry: GeometryObject
      LocationMetadata: LocationMetadataObject
      LocationConnection: LocationConnectionObject
      LocationEdge: LocationEdgeObject
      AggregateLocation: AggregateLocationObject
      LocationMetadataConnection: LocationMetadataConnectionObject
      LocationMetadataEdge: LocationMetadataEdgeObject
      AggregateLocationMetadata: AggregateLocationMetadataObject
      GeometryConnection: GeometryConnectionObject
      GeometryEdge: GeometryEdgeObject
      AggregateGeometry: AggregateGeometryObject
      GovernmentFacility: GovernmentFacilityObject
      GovernmentActor: GovernmentActorObject
      GovernmentActorProfile: GovernmentActorProfileObject
      Affiliation: AffiliationObject
      GovernmentBody: GovernmentBodyObject
      GovernmentBodyMetadata: GovernmentBodyMetadataObject
      AffiliationRole: AffiliationRoleObject
      FacilityMetadata: FacilityMetadataObject
      GovernmentFacilityConnection: GovernmentFacilityConnectionObject
      GovernmentFacilityEdge: GovernmentFacilityEdgeObject
      AggregateGovernmentFacility: AggregateGovernmentFacilityObject
      FacilityMetadataConnection: FacilityMetadataConnectionObject
      FacilityMetadataEdge: FacilityMetadataEdgeObject
      AggregateFacilityMetadata: AggregateFacilityMetadataObject
      User: UserObject
      UserProfile: UserProfileObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      UserProfileConnection: UserProfileConnectionObject
      UserProfileEdge: UserProfileEdgeObject
      AggregateUserProfile: AggregateUserProfileObject
      GovernmentBodyConnection: GovernmentBodyConnectionObject
      GovernmentBodyEdge: GovernmentBodyEdgeObject
      AggregateGovernmentBody: AggregateGovernmentBodyObject
      GovernmentActorConnection: GovernmentActorConnectionObject
      GovernmentActorEdge: GovernmentActorEdgeObject
      AggregateGovernmentActor: AggregateGovernmentActorObject
      GovernmentActorProfileConnection: GovernmentActorProfileConnectionObject
      GovernmentActorProfileEdge: GovernmentActorProfileEdgeObject
      AggregateGovernmentActorProfile: AggregateGovernmentActorProfileObject
      GovernmentBodyMetadataConnection: GovernmentBodyMetadataConnectionObject
      GovernmentBodyMetadataEdge: GovernmentBodyMetadataEdgeObject
      AggregateGovernmentBodyMetadata: AggregateGovernmentBodyMetadataObject
      AffiliationConnection: AffiliationConnectionObject
      AffiliationEdge: AffiliationEdgeObject
      AggregateAffiliation: AggregateAffiliationObject
      AffiliationRoleConnection: AffiliationRoleConnectionObject
      AffiliationRoleEdge: AffiliationRoleEdgeObject
      AggregateAffiliationRole: AggregateAffiliationRoleObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      EmailAddressSubscriptionPayload: EmailAddressSubscriptionPayloadObject
      EmailAddressPreviousValues: EmailAddressPreviousValuesObject
      PhoneNumberSubscriptionPayload: PhoneNumberSubscriptionPayloadObject
      PhoneNumberPreviousValues: PhoneNumberPreviousValuesObject
      ExternalLinkSubscriptionPayload: ExternalLinkSubscriptionPayloadObject
      ExternalLinkPreviousValues: ExternalLinkPreviousValuesObject
      ContactMetadataSubscriptionPayload: ContactMetadataSubscriptionPayloadObject
      ContactMetadataPreviousValues: ContactMetadataPreviousValuesObject
      LocationSubscriptionPayload: LocationSubscriptionPayloadObject
      LocationPreviousValues: LocationPreviousValuesObject
      LocationMetadataSubscriptionPayload: LocationMetadataSubscriptionPayloadObject
      LocationMetadataPreviousValues: LocationMetadataPreviousValuesObject
      GeometrySubscriptionPayload: GeometrySubscriptionPayloadObject
      GeometryPreviousValues: GeometryPreviousValuesObject
      GovernmentFacilitySubscriptionPayload: GovernmentFacilitySubscriptionPayloadObject
      GovernmentFacilityPreviousValues: GovernmentFacilityPreviousValuesObject
      FacilityMetadataSubscriptionPayload: FacilityMetadataSubscriptionPayloadObject
      FacilityMetadataPreviousValues: FacilityMetadataPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      UserProfileSubscriptionPayload: UserProfileSubscriptionPayloadObject
      UserProfilePreviousValues: UserProfilePreviousValuesObject
      GovernmentBodySubscriptionPayload: GovernmentBodySubscriptionPayloadObject
      GovernmentBodyPreviousValues: GovernmentBodyPreviousValuesObject
      GovernmentActorSubscriptionPayload: GovernmentActorSubscriptionPayloadObject
      GovernmentActorPreviousValues: GovernmentActorPreviousValuesObject
      GovernmentActorProfileSubscriptionPayload: GovernmentActorProfileSubscriptionPayloadObject
      GovernmentActorProfilePreviousValues: GovernmentActorProfilePreviousValuesObject
      GovernmentBodyMetadataSubscriptionPayload: GovernmentBodyMetadataSubscriptionPayloadObject
      GovernmentBodyMetadataPreviousValues: GovernmentBodyMetadataPreviousValuesObject
      AffiliationSubscriptionPayload: AffiliationSubscriptionPayloadObject
      AffiliationPreviousValues: AffiliationPreviousValuesObject
      AffiliationRoleSubscriptionPayload: AffiliationRoleSubscriptionPayloadObject
      AffiliationRolePreviousValues: AffiliationRolePreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      EmailAddress: EmailAddressFieldDetails
      ContactMetadata: ContactMetadataFieldDetails
      EmailAddressConnection: EmailAddressConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      EmailAddressEdge: EmailAddressEdgeFieldDetails
      AggregateEmailAddress: AggregateEmailAddressFieldDetails
      PhoneNumber: PhoneNumberFieldDetails
      PhoneNumberConnection: PhoneNumberConnectionFieldDetails
      PhoneNumberEdge: PhoneNumberEdgeFieldDetails
      AggregatePhoneNumber: AggregatePhoneNumberFieldDetails
      ExternalLink: ExternalLinkFieldDetails
      ExternalLinkConnection: ExternalLinkConnectionFieldDetails
      ExternalLinkEdge: ExternalLinkEdgeFieldDetails
      AggregateExternalLink: AggregateExternalLinkFieldDetails
      ContactMetadataConnection: ContactMetadataConnectionFieldDetails
      ContactMetadataEdge: ContactMetadataEdgeFieldDetails
      AggregateContactMetadata: AggregateContactMetadataFieldDetails
      Location: LocationFieldDetails
      Geometry: GeometryFieldDetails
      LocationMetadata: LocationMetadataFieldDetails
      LocationConnection: LocationConnectionFieldDetails
      LocationEdge: LocationEdgeFieldDetails
      AggregateLocation: AggregateLocationFieldDetails
      LocationMetadataConnection: LocationMetadataConnectionFieldDetails
      LocationMetadataEdge: LocationMetadataEdgeFieldDetails
      AggregateLocationMetadata: AggregateLocationMetadataFieldDetails
      GeometryConnection: GeometryConnectionFieldDetails
      GeometryEdge: GeometryEdgeFieldDetails
      AggregateGeometry: AggregateGeometryFieldDetails
      GovernmentFacility: GovernmentFacilityFieldDetails
      GovernmentActor: GovernmentActorFieldDetails
      GovernmentActorProfile: GovernmentActorProfileFieldDetails
      Affiliation: AffiliationFieldDetails
      GovernmentBody: GovernmentBodyFieldDetails
      GovernmentBodyMetadata: GovernmentBodyMetadataFieldDetails
      AffiliationRole: AffiliationRoleFieldDetails
      FacilityMetadata: FacilityMetadataFieldDetails
      GovernmentFacilityConnection: GovernmentFacilityConnectionFieldDetails
      GovernmentFacilityEdge: GovernmentFacilityEdgeFieldDetails
      AggregateGovernmentFacility: AggregateGovernmentFacilityFieldDetails
      FacilityMetadataConnection: FacilityMetadataConnectionFieldDetails
      FacilityMetadataEdge: FacilityMetadataEdgeFieldDetails
      AggregateFacilityMetadata: AggregateFacilityMetadataFieldDetails
      User: UserFieldDetails
      UserProfile: UserProfileFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      UserProfileConnection: UserProfileConnectionFieldDetails
      UserProfileEdge: UserProfileEdgeFieldDetails
      AggregateUserProfile: AggregateUserProfileFieldDetails
      GovernmentBodyConnection: GovernmentBodyConnectionFieldDetails
      GovernmentBodyEdge: GovernmentBodyEdgeFieldDetails
      AggregateGovernmentBody: AggregateGovernmentBodyFieldDetails
      GovernmentActorConnection: GovernmentActorConnectionFieldDetails
      GovernmentActorEdge: GovernmentActorEdgeFieldDetails
      AggregateGovernmentActor: AggregateGovernmentActorFieldDetails
      GovernmentActorProfileConnection: GovernmentActorProfileConnectionFieldDetails
      GovernmentActorProfileEdge: GovernmentActorProfileEdgeFieldDetails
      AggregateGovernmentActorProfile: AggregateGovernmentActorProfileFieldDetails
      GovernmentBodyMetadataConnection: GovernmentBodyMetadataConnectionFieldDetails
      GovernmentBodyMetadataEdge: GovernmentBodyMetadataEdgeFieldDetails
      AggregateGovernmentBodyMetadata: AggregateGovernmentBodyMetadataFieldDetails
      AffiliationConnection: AffiliationConnectionFieldDetails
      AffiliationEdge: AffiliationEdgeFieldDetails
      AggregateAffiliation: AggregateAffiliationFieldDetails
      AffiliationRoleConnection: AffiliationRoleConnectionFieldDetails
      AffiliationRoleEdge: AffiliationRoleEdgeFieldDetails
      AggregateAffiliationRole: AggregateAffiliationRoleFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      EmailAddressSubscriptionPayload: EmailAddressSubscriptionPayloadFieldDetails
      EmailAddressPreviousValues: EmailAddressPreviousValuesFieldDetails
      PhoneNumberSubscriptionPayload: PhoneNumberSubscriptionPayloadFieldDetails
      PhoneNumberPreviousValues: PhoneNumberPreviousValuesFieldDetails
      ExternalLinkSubscriptionPayload: ExternalLinkSubscriptionPayloadFieldDetails
      ExternalLinkPreviousValues: ExternalLinkPreviousValuesFieldDetails
      ContactMetadataSubscriptionPayload: ContactMetadataSubscriptionPayloadFieldDetails
      ContactMetadataPreviousValues: ContactMetadataPreviousValuesFieldDetails
      LocationSubscriptionPayload: LocationSubscriptionPayloadFieldDetails
      LocationPreviousValues: LocationPreviousValuesFieldDetails
      LocationMetadataSubscriptionPayload: LocationMetadataSubscriptionPayloadFieldDetails
      LocationMetadataPreviousValues: LocationMetadataPreviousValuesFieldDetails
      GeometrySubscriptionPayload: GeometrySubscriptionPayloadFieldDetails
      GeometryPreviousValues: GeometryPreviousValuesFieldDetails
      GovernmentFacilitySubscriptionPayload: GovernmentFacilitySubscriptionPayloadFieldDetails
      GovernmentFacilityPreviousValues: GovernmentFacilityPreviousValuesFieldDetails
      FacilityMetadataSubscriptionPayload: FacilityMetadataSubscriptionPayloadFieldDetails
      FacilityMetadataPreviousValues: FacilityMetadataPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      UserProfileSubscriptionPayload: UserProfileSubscriptionPayloadFieldDetails
      UserProfilePreviousValues: UserProfilePreviousValuesFieldDetails
      GovernmentBodySubscriptionPayload: GovernmentBodySubscriptionPayloadFieldDetails
      GovernmentBodyPreviousValues: GovernmentBodyPreviousValuesFieldDetails
      GovernmentActorSubscriptionPayload: GovernmentActorSubscriptionPayloadFieldDetails
      GovernmentActorPreviousValues: GovernmentActorPreviousValuesFieldDetails
      GovernmentActorProfileSubscriptionPayload: GovernmentActorProfileSubscriptionPayloadFieldDetails
      GovernmentActorProfilePreviousValues: GovernmentActorProfilePreviousValuesFieldDetails
      GovernmentBodyMetadataSubscriptionPayload: GovernmentBodyMetadataSubscriptionPayloadFieldDetails
      GovernmentBodyMetadataPreviousValues: GovernmentBodyMetadataPreviousValuesFieldDetails
      AffiliationSubscriptionPayload: AffiliationSubscriptionPayloadFieldDetails
      AffiliationPreviousValues: AffiliationPreviousValuesFieldDetails
      AffiliationRoleSubscriptionPayload: AffiliationRoleSubscriptionPayloadFieldDetails
      AffiliationRolePreviousValues: AffiliationRolePreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      EmailAddressWhereUniqueInput: EmailAddressWhereUniqueInputInputObject
      EmailAddressWhereInput: EmailAddressWhereInputInputObject
      ContactMetadataWhereInput: ContactMetadataWhereInputInputObject
      PhoneNumberWhereUniqueInput: PhoneNumberWhereUniqueInputInputObject
      PhoneNumberWhereInput: PhoneNumberWhereInputInputObject
      ExternalLinkWhereUniqueInput: ExternalLinkWhereUniqueInputInputObject
      ExternalLinkWhereInput: ExternalLinkWhereInputInputObject
      ContactMetadataWhereUniqueInput: ContactMetadataWhereUniqueInputInputObject
      LocationWhereUniqueInput: LocationWhereUniqueInputInputObject
      LocationWhereInput: LocationWhereInputInputObject
      GeometryWhereInput: GeometryWhereInputInputObject
      LocationMetadataWhereInput: LocationMetadataWhereInputInputObject
      LocationMetadataWhereUniqueInput: LocationMetadataWhereUniqueInputInputObject
      GeometryWhereUniqueInput: GeometryWhereUniqueInputInputObject
      GovernmentFacilityWhereUniqueInput: GovernmentFacilityWhereUniqueInputInputObject
      GovernmentActorWhereInput: GovernmentActorWhereInputInputObject
      GovernmentActorProfileWhereInput: GovernmentActorProfileWhereInputInputObject
      AffiliationWhereInput: AffiliationWhereInputInputObject
      GovernmentBodyWhereInput: GovernmentBodyWhereInputInputObject
      GovernmentFacilityWhereInput: GovernmentFacilityWhereInputInputObject
      FacilityMetadataWhereInput: FacilityMetadataWhereInputInputObject
      GovernmentBodyMetadataWhereInput: GovernmentBodyMetadataWhereInputInputObject
      AffiliationRoleWhereInput: AffiliationRoleWhereInputInputObject
      FacilityMetadataWhereUniqueInput: FacilityMetadataWhereUniqueInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      UserProfileWhereInput: UserProfileWhereInputInputObject
      UserProfileWhereUniqueInput: UserProfileWhereUniqueInputInputObject
      GovernmentBodyWhereUniqueInput: GovernmentBodyWhereUniqueInputInputObject
      GovernmentActorWhereUniqueInput: GovernmentActorWhereUniqueInputInputObject
      GovernmentActorProfileWhereUniqueInput: GovernmentActorProfileWhereUniqueInputInputObject
      GovernmentBodyMetadataWhereUniqueInput: GovernmentBodyMetadataWhereUniqueInputInputObject
      AffiliationWhereUniqueInput: AffiliationWhereUniqueInputInputObject
      AffiliationRoleWhereUniqueInput: AffiliationRoleWhereUniqueInputInputObject
      EmailAddressCreateInput: EmailAddressCreateInputInputObject
      ContactMetadataCreateOneInput: ContactMetadataCreateOneInputInputObject
      ContactMetadataCreateInput: ContactMetadataCreateInputInputObject
      EmailAddressUpdateInput: EmailAddressUpdateInputInputObject
      ContactMetadataUpdateOneRequiredInput: ContactMetadataUpdateOneRequiredInputInputObject
      ContactMetadataUpdateDataInput: ContactMetadataUpdateDataInputInputObject
      ContactMetadataUpsertNestedInput: ContactMetadataUpsertNestedInputInputObject
      EmailAddressUpdateManyMutationInput: EmailAddressUpdateManyMutationInputInputObject
      PhoneNumberCreateInput: PhoneNumberCreateInputInputObject
      PhoneNumberUpdateInput: PhoneNumberUpdateInputInputObject
      PhoneNumberUpdateManyMutationInput: PhoneNumberUpdateManyMutationInputInputObject
      ExternalLinkCreateInput: ExternalLinkCreateInputInputObject
      ExternalLinkUpdateInput: ExternalLinkUpdateInputInputObject
      ExternalLinkUpdateManyMutationInput: ExternalLinkUpdateManyMutationInputInputObject
      ContactMetadataUpdateInput: ContactMetadataUpdateInputInputObject
      ContactMetadataUpdateManyMutationInput: ContactMetadataUpdateManyMutationInputInputObject
      LocationCreateInput: LocationCreateInputInputObject
      GeometryCreateOneInput: GeometryCreateOneInputInputObject
      GeometryCreateInput: GeometryCreateInputInputObject
      LocationMetadataCreateOneInput: LocationMetadataCreateOneInputInputObject
      LocationMetadataCreateInput: LocationMetadataCreateInputInputObject
      LocationUpdateInput: LocationUpdateInputInputObject
      GeometryUpdateOneInput: GeometryUpdateOneInputInputObject
      GeometryUpdateDataInput: GeometryUpdateDataInputInputObject
      GeometryUpsertNestedInput: GeometryUpsertNestedInputInputObject
      LocationMetadataUpdateOneRequiredInput: LocationMetadataUpdateOneRequiredInputInputObject
      LocationMetadataUpdateDataInput: LocationMetadataUpdateDataInputInputObject
      LocationMetadataUpsertNestedInput: LocationMetadataUpsertNestedInputInputObject
      LocationUpdateManyMutationInput: LocationUpdateManyMutationInputInputObject
      LocationMetadataUpdateInput: LocationMetadataUpdateInputInputObject
      LocationMetadataUpdateManyMutationInput: LocationMetadataUpdateManyMutationInputInputObject
      GeometryUpdateInput: GeometryUpdateInputInputObject
      GeometryUpdateManyMutationInput: GeometryUpdateManyMutationInputInputObject
      GovernmentFacilityCreateInput: GovernmentFacilityCreateInputInputObject
      LocationCreateOneInput: LocationCreateOneInputInputObject
      GovernmentActorCreateManyInput: GovernmentActorCreateManyInputInputObject
      GovernmentActorCreateInput: GovernmentActorCreateInputInputObject
      GovernmentActorProfileCreateOneInput: GovernmentActorProfileCreateOneInputInputObject
      GovernmentActorProfileCreateInput: GovernmentActorProfileCreateInputInputObject
      EmailAddressCreateManyInput: EmailAddressCreateManyInputInputObject
      PhoneNumberCreateManyInput: PhoneNumberCreateManyInputInputObject
      AffiliationCreateManyWithoutActorInput: AffiliationCreateManyWithoutActorInputInputObject
      AffiliationCreateWithoutActorInput: AffiliationCreateWithoutActorInputInputObject
      GovernmentBodyCreateOneInput: GovernmentBodyCreateOneInputInputObject
      GovernmentBodyCreateInput: GovernmentBodyCreateInputInputObject
      GovernmentFacilityCreateManyInput: GovernmentFacilityCreateManyInputInputObject
      GovernmentBodyCreateOneWithoutParentInput: GovernmentBodyCreateOneWithoutParentInputInputObject
      GovernmentBodyCreateWithoutParentInput: GovernmentBodyCreateWithoutParentInputInputObject
      GovernmentBodyCreateManyWithoutChildrenInput: GovernmentBodyCreateManyWithoutChildrenInputInputObject
      GovernmentBodyCreateWithoutChildrenInput: GovernmentBodyCreateWithoutChildrenInputInputObject
      GovernmentBodyMetadataCreateOneInput: GovernmentBodyMetadataCreateOneInputInputObject
      GovernmentBodyMetadataCreateInput: GovernmentBodyMetadataCreateInputInputObject
      AffiliationRoleCreateOneInput: AffiliationRoleCreateOneInputInputObject
      AffiliationRoleCreateInput: AffiliationRoleCreateInputInputObject
      PhoneNumberCreateOneInput: PhoneNumberCreateOneInputInputObject
      EmailAddressCreateOneInput: EmailAddressCreateOneInputInputObject
      ExternalLinkCreateOneInput: ExternalLinkCreateOneInputInputObject
      FacilityMetadataCreateOneInput: FacilityMetadataCreateOneInputInputObject
      FacilityMetadataCreateInput: FacilityMetadataCreateInputInputObject
      GovernmentFacilityUpdateInput: GovernmentFacilityUpdateInputInputObject
      LocationUpdateOneRequiredInput: LocationUpdateOneRequiredInputInputObject
      LocationUpdateDataInput: LocationUpdateDataInputInputObject
      LocationUpsertNestedInput: LocationUpsertNestedInputInputObject
      GovernmentActorUpdateManyInput: GovernmentActorUpdateManyInputInputObject
      GovernmentActorUpdateWithWhereUniqueNestedInput: GovernmentActorUpdateWithWhereUniqueNestedInputInputObject
      GovernmentActorUpdateDataInput: GovernmentActorUpdateDataInputInputObject
      GovernmentActorProfileUpdateOneRequiredInput: GovernmentActorProfileUpdateOneRequiredInputInputObject
      GovernmentActorProfileUpdateDataInput: GovernmentActorProfileUpdateDataInputInputObject
      EmailAddressUpdateManyInput: EmailAddressUpdateManyInputInputObject
      EmailAddressUpdateWithWhereUniqueNestedInput: EmailAddressUpdateWithWhereUniqueNestedInputInputObject
      EmailAddressUpdateDataInput: EmailAddressUpdateDataInputInputObject
      EmailAddressUpsertWithWhereUniqueNestedInput: EmailAddressUpsertWithWhereUniqueNestedInputInputObject
      EmailAddressScalarWhereInput: EmailAddressScalarWhereInputInputObject
      EmailAddressUpdateManyWithWhereNestedInput: EmailAddressUpdateManyWithWhereNestedInputInputObject
      EmailAddressUpdateManyDataInput: EmailAddressUpdateManyDataInputInputObject
      PhoneNumberUpdateManyInput: PhoneNumberUpdateManyInputInputObject
      PhoneNumberUpdateWithWhereUniqueNestedInput: PhoneNumberUpdateWithWhereUniqueNestedInputInputObject
      PhoneNumberUpdateDataInput: PhoneNumberUpdateDataInputInputObject
      PhoneNumberUpsertWithWhereUniqueNestedInput: PhoneNumberUpsertWithWhereUniqueNestedInputInputObject
      PhoneNumberScalarWhereInput: PhoneNumberScalarWhereInputInputObject
      PhoneNumberUpdateManyWithWhereNestedInput: PhoneNumberUpdateManyWithWhereNestedInputInputObject
      PhoneNumberUpdateManyDataInput: PhoneNumberUpdateManyDataInputInputObject
      GovernmentActorProfileUpsertNestedInput: GovernmentActorProfileUpsertNestedInputInputObject
      AffiliationUpdateManyWithoutActorInput: AffiliationUpdateManyWithoutActorInputInputObject
      AffiliationUpdateWithWhereUniqueWithoutActorInput: AffiliationUpdateWithWhereUniqueWithoutActorInputInputObject
      AffiliationUpdateWithoutActorDataInput: AffiliationUpdateWithoutActorDataInputInputObject
      GovernmentBodyUpdateOneRequiredInput: GovernmentBodyUpdateOneRequiredInputInputObject
      GovernmentBodyUpdateDataInput: GovernmentBodyUpdateDataInputInputObject
      GovernmentFacilityUpdateManyInput: GovernmentFacilityUpdateManyInputInputObject
      GovernmentFacilityUpdateWithWhereUniqueNestedInput: GovernmentFacilityUpdateWithWhereUniqueNestedInputInputObject
      GovernmentFacilityUpdateDataInput: GovernmentFacilityUpdateDataInputInputObject
      PhoneNumberUpdateOneInput: PhoneNumberUpdateOneInputInputObject
      PhoneNumberUpsertNestedInput: PhoneNumberUpsertNestedInputInputObject
      EmailAddressUpdateOneInput: EmailAddressUpdateOneInputInputObject
      EmailAddressUpsertNestedInput: EmailAddressUpsertNestedInputInputObject
      ExternalLinkUpdateOneInput: ExternalLinkUpdateOneInputInputObject
      ExternalLinkUpdateDataInput: ExternalLinkUpdateDataInputInputObject
      ExternalLinkUpsertNestedInput: ExternalLinkUpsertNestedInputInputObject
      FacilityMetadataUpdateOneRequiredInput: FacilityMetadataUpdateOneRequiredInputInputObject
      FacilityMetadataUpdateDataInput: FacilityMetadataUpdateDataInputInputObject
      FacilityMetadataUpsertNestedInput: FacilityMetadataUpsertNestedInputInputObject
      GovernmentFacilityUpsertWithWhereUniqueNestedInput: GovernmentFacilityUpsertWithWhereUniqueNestedInputInputObject
      GovernmentFacilityScalarWhereInput: GovernmentFacilityScalarWhereInputInputObject
      GovernmentFacilityUpdateManyWithWhereNestedInput: GovernmentFacilityUpdateManyWithWhereNestedInputInputObject
      GovernmentFacilityUpdateManyDataInput: GovernmentFacilityUpdateManyDataInputInputObject
      GovernmentBodyUpdateOneWithoutParentInput: GovernmentBodyUpdateOneWithoutParentInputInputObject
      GovernmentBodyUpdateWithoutParentDataInput: GovernmentBodyUpdateWithoutParentDataInputInputObject
      GovernmentBodyUpdateManyWithoutChildrenInput: GovernmentBodyUpdateManyWithoutChildrenInputInputObject
      GovernmentBodyUpdateWithWhereUniqueWithoutChildrenInput: GovernmentBodyUpdateWithWhereUniqueWithoutChildrenInputInputObject
      GovernmentBodyUpdateWithoutChildrenDataInput: GovernmentBodyUpdateWithoutChildrenDataInputInputObject
      GovernmentBodyMetadataUpdateOneRequiredInput: GovernmentBodyMetadataUpdateOneRequiredInputInputObject
      GovernmentBodyMetadataUpdateDataInput: GovernmentBodyMetadataUpdateDataInputInputObject
      GovernmentBodyMetadataUpsertNestedInput: GovernmentBodyMetadataUpsertNestedInputInputObject
      GovernmentBodyUpsertWithWhereUniqueWithoutChildrenInput: GovernmentBodyUpsertWithWhereUniqueWithoutChildrenInputInputObject
      GovernmentBodyScalarWhereInput: GovernmentBodyScalarWhereInputInputObject
      GovernmentBodyUpdateManyWithWhereNestedInput: GovernmentBodyUpdateManyWithWhereNestedInputInputObject
      GovernmentBodyUpdateManyDataInput: GovernmentBodyUpdateManyDataInputInputObject
      GovernmentBodyUpsertWithoutParentInput: GovernmentBodyUpsertWithoutParentInputInputObject
      GovernmentBodyUpsertNestedInput: GovernmentBodyUpsertNestedInputInputObject
      AffiliationRoleUpdateOneInput: AffiliationRoleUpdateOneInputInputObject
      AffiliationRoleUpdateDataInput: AffiliationRoleUpdateDataInputInputObject
      AffiliationRoleUpsertNestedInput: AffiliationRoleUpsertNestedInputInputObject
      AffiliationUpsertWithWhereUniqueWithoutActorInput: AffiliationUpsertWithWhereUniqueWithoutActorInputInputObject
      AffiliationScalarWhereInput: AffiliationScalarWhereInputInputObject
      AffiliationUpdateManyWithWhereNestedInput: AffiliationUpdateManyWithWhereNestedInputInputObject
      AffiliationUpdateManyDataInput: AffiliationUpdateManyDataInputInputObject
      GovernmentActorUpsertWithWhereUniqueNestedInput: GovernmentActorUpsertWithWhereUniqueNestedInputInputObject
      GovernmentActorScalarWhereInput: GovernmentActorScalarWhereInputInputObject
      GovernmentFacilityUpdateManyMutationInput: GovernmentFacilityUpdateManyMutationInputInputObject
      FacilityMetadataUpdateInput: FacilityMetadataUpdateInputInputObject
      FacilityMetadataUpdateManyMutationInput: FacilityMetadataUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserProfileCreateOneWithoutUserInput: UserProfileCreateOneWithoutUserInputInputObject
      UserProfileCreateWithoutUserInput: UserProfileCreateWithoutUserInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserProfileUpdateOneRequiredWithoutUserInput: UserProfileUpdateOneRequiredWithoutUserInputInputObject
      UserProfileUpdateWithoutUserDataInput: UserProfileUpdateWithoutUserDataInputInputObject
      UserProfileUpsertWithoutUserInput: UserProfileUpsertWithoutUserInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      UserProfileCreateInput: UserProfileCreateInputInputObject
      UserCreateOneWithoutProfileInput: UserCreateOneWithoutProfileInputInputObject
      UserCreateWithoutProfileInput: UserCreateWithoutProfileInputInputObject
      UserProfileUpdateInput: UserProfileUpdateInputInputObject
      UserUpdateOneRequiredWithoutProfileInput: UserUpdateOneRequiredWithoutProfileInputInputObject
      UserUpdateWithoutProfileDataInput: UserUpdateWithoutProfileDataInputInputObject
      UserUpsertWithoutProfileInput: UserUpsertWithoutProfileInputInputObject
      UserProfileUpdateManyMutationInput: UserProfileUpdateManyMutationInputInputObject
      GovernmentBodyUpdateInput: GovernmentBodyUpdateInputInputObject
      GovernmentBodyUpdateManyMutationInput: GovernmentBodyUpdateManyMutationInputInputObject
      GovernmentActorUpdateInput: GovernmentActorUpdateInputInputObject
      GovernmentActorProfileUpdateInput: GovernmentActorProfileUpdateInputInputObject
      GovernmentActorProfileUpdateManyMutationInput: GovernmentActorProfileUpdateManyMutationInputInputObject
      GovernmentBodyMetadataUpdateInput: GovernmentBodyMetadataUpdateInputInputObject
      GovernmentBodyMetadataUpdateManyMutationInput: GovernmentBodyMetadataUpdateManyMutationInputInputObject
      AffiliationCreateInput: AffiliationCreateInputInputObject
      GovernmentActorCreateOneWithoutAffiliationsInput: GovernmentActorCreateOneWithoutAffiliationsInputInputObject
      GovernmentActorCreateWithoutAffiliationsInput: GovernmentActorCreateWithoutAffiliationsInputInputObject
      AffiliationUpdateInput: AffiliationUpdateInputInputObject
      GovernmentActorUpdateOneRequiredWithoutAffiliationsInput: GovernmentActorUpdateOneRequiredWithoutAffiliationsInputInputObject
      GovernmentActorUpdateWithoutAffiliationsDataInput: GovernmentActorUpdateWithoutAffiliationsDataInputInputObject
      GovernmentActorUpsertWithoutAffiliationsInput: GovernmentActorUpsertWithoutAffiliationsInputInputObject
      AffiliationUpdateManyMutationInput: AffiliationUpdateManyMutationInputInputObject
      AffiliationRoleUpdateInput: AffiliationRoleUpdateInputInputObject
      AffiliationRoleUpdateManyMutationInput: AffiliationRoleUpdateManyMutationInputInputObject
      EmailAddressSubscriptionWhereInput: EmailAddressSubscriptionWhereInputInputObject
      PhoneNumberSubscriptionWhereInput: PhoneNumberSubscriptionWhereInputInputObject
      ExternalLinkSubscriptionWhereInput: ExternalLinkSubscriptionWhereInputInputObject
      ContactMetadataSubscriptionWhereInput: ContactMetadataSubscriptionWhereInputInputObject
      LocationSubscriptionWhereInput: LocationSubscriptionWhereInputInputObject
      LocationMetadataSubscriptionWhereInput: LocationMetadataSubscriptionWhereInputInputObject
      GeometrySubscriptionWhereInput: GeometrySubscriptionWhereInputInputObject
      GovernmentFacilitySubscriptionWhereInput: GovernmentFacilitySubscriptionWhereInputInputObject
      FacilityMetadataSubscriptionWhereInput: FacilityMetadataSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      UserProfileSubscriptionWhereInput: UserProfileSubscriptionWhereInputInputObject
      GovernmentBodySubscriptionWhereInput: GovernmentBodySubscriptionWhereInputInputObject
      GovernmentActorSubscriptionWhereInput: GovernmentActorSubscriptionWhereInputInputObject
      GovernmentActorProfileSubscriptionWhereInput: GovernmentActorProfileSubscriptionWhereInputInputObject
      GovernmentBodyMetadataSubscriptionWhereInput: GovernmentBodyMetadataSubscriptionWhereInputInputObject
      AffiliationSubscriptionWhereInput: AffiliationSubscriptionWhereInputInputObject
      AffiliationRoleSubscriptionWhereInput: AffiliationRoleSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    EmailAddressOrderByInput: EmailAddressOrderByInputValues,
    PhoneNumberOrderByInput: PhoneNumberOrderByInputValues,
    ExternalLinkOrderByInput: ExternalLinkOrderByInputValues,
    ContactMetadataOrderByInput: ContactMetadataOrderByInputValues,
    LocationOrderByInput: LocationOrderByInputValues,
    LocationMetadataOrderByInput: LocationMetadataOrderByInputValues,
    GeometryOrderByInput: GeometryOrderByInputValues,
    GovernmentFacilityType: GovernmentFacilityTypeValues,
    GovernmentActorOrderByInput: GovernmentActorOrderByInputValues,
    AffiliationOrderByInput: AffiliationOrderByInputValues,
    GovernmentFacilityOrderByInput: GovernmentFacilityOrderByInputValues,
    GovernmentBodyOrderByInput: GovernmentBodyOrderByInputValues,
    FacilityMetadataOrderByInput: FacilityMetadataOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    UserProfileOrderByInput: UserProfileOrderByInputValues,
    GovernmentActorProfileOrderByInput: GovernmentActorProfileOrderByInputValues,
    GovernmentBodyMetadataOrderByInput: GovernmentBodyMetadataOrderByInputValues,
    AffiliationRoleOrderByInput: AffiliationRoleOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'emailAddress', args?: QueryEmailAddressArgs[] | false, alias?: string  } 
  | { name: 'emailAddresses', args?: QueryEmailAddressesArgs[] | false, alias?: string  } 
  | { name: 'emailAddressesConnection', args?: QueryEmailAddressesConnectionArgs[] | false, alias?: string  } 
  | { name: 'phoneNumber', args?: QueryPhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'phoneNumbers', args?: QueryPhoneNumbersArgs[] | false, alias?: string  } 
  | { name: 'phoneNumbersConnection', args?: QueryPhoneNumbersConnectionArgs[] | false, alias?: string  } 
  | { name: 'externalLink', args?: QueryExternalLinkArgs[] | false, alias?: string  } 
  | { name: 'externalLinks', args?: QueryExternalLinksArgs[] | false, alias?: string  } 
  | { name: 'externalLinksConnection', args?: QueryExternalLinksConnectionArgs[] | false, alias?: string  } 
  | { name: 'contactMetadata', args?: QueryContactMetadataArgs[] | false, alias?: string  } 
  | { name: 'contactMetadatas', args?: QueryContactMetadatasArgs[] | false, alias?: string  } 
  | { name: 'contactMetadatasConnection', args?: QueryContactMetadatasConnectionArgs[] | false, alias?: string  } 
  | { name: 'location', args?: QueryLocationArgs[] | false, alias?: string  } 
  | { name: 'locations', args?: QueryLocationsArgs[] | false, alias?: string  } 
  | { name: 'locationsConnection', args?: QueryLocationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'locationMetadata', args?: QueryLocationMetadataArgs[] | false, alias?: string  } 
  | { name: 'locationMetadatas', args?: QueryLocationMetadatasArgs[] | false, alias?: string  } 
  | { name: 'locationMetadatasConnection', args?: QueryLocationMetadatasConnectionArgs[] | false, alias?: string  } 
  | { name: 'geometry', args?: QueryGeometryArgs[] | false, alias?: string  } 
  | { name: 'geometries', args?: QueryGeometriesArgs[] | false, alias?: string  } 
  | { name: 'geometriesConnection', args?: QueryGeometriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'governmentFacility', args?: QueryGovernmentFacilityArgs[] | false, alias?: string  } 
  | { name: 'governmentFacilities', args?: QueryGovernmentFacilitiesArgs[] | false, alias?: string  } 
  | { name: 'governmentFacilitiesConnection', args?: QueryGovernmentFacilitiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'facilityMetadata', args?: QueryFacilityMetadataArgs[] | false, alias?: string  } 
  | { name: 'facilityMetadatas', args?: QueryFacilityMetadatasArgs[] | false, alias?: string  } 
  | { name: 'facilityMetadatasConnection', args?: QueryFacilityMetadatasConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'userProfile', args?: QueryUserProfileArgs[] | false, alias?: string  } 
  | { name: 'userProfiles', args?: QueryUserProfilesArgs[] | false, alias?: string  } 
  | { name: 'userProfilesConnection', args?: QueryUserProfilesConnectionArgs[] | false, alias?: string  } 
  | { name: 'governmentBody', args?: QueryGovernmentBodyArgs[] | false, alias?: string  } 
  | { name: 'governmentBodies', args?: QueryGovernmentBodiesArgs[] | false, alias?: string  } 
  | { name: 'governmentBodiesConnection', args?: QueryGovernmentBodiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'governmentActor', args?: QueryGovernmentActorArgs[] | false, alias?: string  } 
  | { name: 'governmentActors', args?: QueryGovernmentActorsArgs[] | false, alias?: string  } 
  | { name: 'governmentActorsConnection', args?: QueryGovernmentActorsConnectionArgs[] | false, alias?: string  } 
  | { name: 'governmentActorProfile', args?: QueryGovernmentActorProfileArgs[] | false, alias?: string  } 
  | { name: 'governmentActorProfiles', args?: QueryGovernmentActorProfilesArgs[] | false, alias?: string  } 
  | { name: 'governmentActorProfilesConnection', args?: QueryGovernmentActorProfilesConnectionArgs[] | false, alias?: string  } 
  | { name: 'governmentBodyMetadata', args?: QueryGovernmentBodyMetadataArgs[] | false, alias?: string  } 
  | { name: 'governmentBodyMetadatas', args?: QueryGovernmentBodyMetadatasArgs[] | false, alias?: string  } 
  | { name: 'governmentBodyMetadatasConnection', args?: QueryGovernmentBodyMetadatasConnectionArgs[] | false, alias?: string  } 
  | { name: 'affiliation', args?: QueryAffiliationArgs[] | false, alias?: string  } 
  | { name: 'affiliations', args?: QueryAffiliationsArgs[] | false, alias?: string  } 
  | { name: 'affiliationsConnection', args?: QueryAffiliationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'affiliationRole', args?: QueryAffiliationRoleArgs[] | false, alias?: string  } 
  | { name: 'affiliationRoles', args?: QueryAffiliationRolesArgs[] | false, alias?: string  } 
  | { name: 'affiliationRolesConnection', args?: QueryAffiliationRolesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'emailAddress'
  | 'emailAddresses'
  | 'emailAddressesConnection'
  | 'phoneNumber'
  | 'phoneNumbers'
  | 'phoneNumbersConnection'
  | 'externalLink'
  | 'externalLinks'
  | 'externalLinksConnection'
  | 'contactMetadata'
  | 'contactMetadatas'
  | 'contactMetadatasConnection'
  | 'location'
  | 'locations'
  | 'locationsConnection'
  | 'locationMetadata'
  | 'locationMetadatas'
  | 'locationMetadatasConnection'
  | 'geometry'
  | 'geometries'
  | 'geometriesConnection'
  | 'governmentFacility'
  | 'governmentFacilities'
  | 'governmentFacilitiesConnection'
  | 'facilityMetadata'
  | 'facilityMetadatas'
  | 'facilityMetadatasConnection'
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'userProfile'
  | 'userProfiles'
  | 'userProfilesConnection'
  | 'governmentBody'
  | 'governmentBodies'
  | 'governmentBodiesConnection'
  | 'governmentActor'
  | 'governmentActors'
  | 'governmentActorsConnection'
  | 'governmentActorProfile'
  | 'governmentActorProfiles'
  | 'governmentActorProfilesConnection'
  | 'governmentBodyMetadata'
  | 'governmentBodyMetadatas'
  | 'governmentBodyMetadatasConnection'
  | 'affiliation'
  | 'affiliations'
  | 'affiliationsConnection'
  | 'affiliationRole'
  | 'affiliationRoles'
  | 'affiliationRolesConnection'


type QueryEmailAddressArgs =
  | 'where'
type QueryEmailAddressesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmailAddressesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPhoneNumberArgs =
  | 'where'
type QueryPhoneNumbersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPhoneNumbersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryExternalLinkArgs =
  | 'where'
type QueryExternalLinksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryExternalLinksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryContactMetadataArgs =
  | 'where'
type QueryContactMetadatasArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryContactMetadatasConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLocationArgs =
  | 'where'
type QueryLocationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLocationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLocationMetadataArgs =
  | 'where'
type QueryLocationMetadatasArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLocationMetadatasConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGeometryArgs =
  | 'where'
type QueryGeometriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGeometriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGovernmentFacilityArgs =
  | 'where'
type QueryGovernmentFacilitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGovernmentFacilitiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFacilityMetadataArgs =
  | 'where'
type QueryFacilityMetadatasArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFacilityMetadatasConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserProfileArgs =
  | 'where'
type QueryUserProfilesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserProfilesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGovernmentBodyArgs =
  | 'where'
type QueryGovernmentBodiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGovernmentBodiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGovernmentActorArgs =
  | 'where'
type QueryGovernmentActorsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGovernmentActorsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGovernmentActorProfileArgs =
  | 'where'
type QueryGovernmentActorProfilesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGovernmentActorProfilesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGovernmentBodyMetadataArgs =
  | 'where'
type QueryGovernmentBodyMetadatasArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGovernmentBodyMetadatasConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAffiliationArgs =
  | 'where'
type QueryAffiliationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAffiliationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAffiliationRoleArgs =
  | 'where'
type QueryAffiliationRolesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAffiliationRolesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  emailAddress: {
    type: 'EmailAddress'
    args: Record<QueryEmailAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EmailAddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress | null> | prisma.EmailAddress | null
  }
  emailAddresses: {
    type: 'EmailAddress'
    args: Record<QueryEmailAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmailAddressWhereInput | null, orderBy?: prisma.EmailAddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress[]> | prisma.EmailAddress[]
  }
  emailAddressesConnection: {
    type: 'EmailAddressConnection'
    args: Record<QueryEmailAddressesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmailAddressWhereInput | null, orderBy?: prisma.EmailAddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddressConnection> | prisma.EmailAddressConnection
  }
  phoneNumber: {
    type: 'PhoneNumber'
    args: Record<QueryPhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PhoneNumberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber | null> | prisma.PhoneNumber | null
  }
  phoneNumbers: {
    type: 'PhoneNumber'
    args: Record<QueryPhoneNumbersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PhoneNumberWhereInput | null, orderBy?: prisma.PhoneNumberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber[]> | prisma.PhoneNumber[]
  }
  phoneNumbersConnection: {
    type: 'PhoneNumberConnection'
    args: Record<QueryPhoneNumbersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PhoneNumberWhereInput | null, orderBy?: prisma.PhoneNumberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumberConnection> | prisma.PhoneNumberConnection
  }
  externalLink: {
    type: 'ExternalLink'
    args: Record<QueryExternalLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ExternalLinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLink | null> | prisma.ExternalLink | null
  }
  externalLinks: {
    type: 'ExternalLink'
    args: Record<QueryExternalLinksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ExternalLinkWhereInput | null, orderBy?: prisma.ExternalLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLink[]> | prisma.ExternalLink[]
  }
  externalLinksConnection: {
    type: 'ExternalLinkConnection'
    args: Record<QueryExternalLinksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ExternalLinkWhereInput | null, orderBy?: prisma.ExternalLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLinkConnection> | prisma.ExternalLinkConnection
  }
  contactMetadata: {
    type: 'ContactMetadata'
    args: Record<QueryContactMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ContactMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata | null> | prisma.ContactMetadata | null
  }
  contactMetadatas: {
    type: 'ContactMetadata'
    args: Record<QueryContactMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ContactMetadataWhereInput | null, orderBy?: prisma.ContactMetadataOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata[]> | prisma.ContactMetadata[]
  }
  contactMetadatasConnection: {
    type: 'ContactMetadataConnection'
    args: Record<QueryContactMetadatasConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ContactMetadataWhereInput | null, orderBy?: prisma.ContactMetadataOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadataConnection> | prisma.ContactMetadataConnection
  }
  location: {
    type: 'Location'
    args: Record<QueryLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LocationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location | null> | prisma.Location | null
  }
  locations: {
    type: 'Location'
    args: Record<QueryLocationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LocationWhereInput | null, orderBy?: prisma.LocationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location[]> | prisma.Location[]
  }
  locationsConnection: {
    type: 'LocationConnection'
    args: Record<QueryLocationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LocationWhereInput | null, orderBy?: prisma.LocationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationConnection> | prisma.LocationConnection
  }
  locationMetadata: {
    type: 'LocationMetadata'
    args: Record<QueryLocationMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LocationMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadata | null> | prisma.LocationMetadata | null
  }
  locationMetadatas: {
    type: 'LocationMetadata'
    args: Record<QueryLocationMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LocationMetadataWhereInput | null, orderBy?: prisma.LocationMetadataOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadata[]> | prisma.LocationMetadata[]
  }
  locationMetadatasConnection: {
    type: 'LocationMetadataConnection'
    args: Record<QueryLocationMetadatasConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LocationMetadataWhereInput | null, orderBy?: prisma.LocationMetadataOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadataConnection> | prisma.LocationMetadataConnection
  }
  geometry: {
    type: 'Geometry'
    args: Record<QueryGeometryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GeometryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geometry | null> | prisma.Geometry | null
  }
  geometries: {
    type: 'Geometry'
    args: Record<QueryGeometriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GeometryWhereInput | null, orderBy?: prisma.GeometryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geometry[]> | prisma.Geometry[]
  }
  geometriesConnection: {
    type: 'GeometryConnection'
    args: Record<QueryGeometriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GeometryWhereInput | null, orderBy?: prisma.GeometryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeometryConnection> | prisma.GeometryConnection
  }
  governmentFacility: {
    type: 'GovernmentFacility'
    args: Record<QueryGovernmentFacilityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GovernmentFacilityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacility | null> | prisma.GovernmentFacility | null
  }
  governmentFacilities: {
    type: 'GovernmentFacility'
    args: Record<QueryGovernmentFacilitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GovernmentFacilityWhereInput | null, orderBy?: prisma.GovernmentFacilityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacility[]> | prisma.GovernmentFacility[]
  }
  governmentFacilitiesConnection: {
    type: 'GovernmentFacilityConnection'
    args: Record<QueryGovernmentFacilitiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GovernmentFacilityWhereInput | null, orderBy?: prisma.GovernmentFacilityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacilityConnection> | prisma.GovernmentFacilityConnection
  }
  facilityMetadata: {
    type: 'FacilityMetadata'
    args: Record<QueryFacilityMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FacilityMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadata | null> | prisma.FacilityMetadata | null
  }
  facilityMetadatas: {
    type: 'FacilityMetadata'
    args: Record<QueryFacilityMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FacilityMetadataWhereInput | null, orderBy?: prisma.FacilityMetadataOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadata[]> | prisma.FacilityMetadata[]
  }
  facilityMetadatasConnection: {
    type: 'FacilityMetadataConnection'
    args: Record<QueryFacilityMetadatasConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FacilityMetadataWhereInput | null, orderBy?: prisma.FacilityMetadataOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadataConnection> | prisma.FacilityMetadataConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  userProfile: {
    type: 'UserProfile'
    args: Record<QueryUserProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfile | null> | prisma.UserProfile | null
  }
  userProfiles: {
    type: 'UserProfile'
    args: Record<QueryUserProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserProfileWhereInput | null, orderBy?: prisma.UserProfileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfile[]> | prisma.UserProfile[]
  }
  userProfilesConnection: {
    type: 'UserProfileConnection'
    args: Record<QueryUserProfilesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserProfileWhereInput | null, orderBy?: prisma.UserProfileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfileConnection> | prisma.UserProfileConnection
  }
  governmentBody: {
    type: 'GovernmentBody'
    args: Record<QueryGovernmentBodyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GovernmentBodyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody | null> | prisma.GovernmentBody | null
  }
  governmentBodies: {
    type: 'GovernmentBody'
    args: Record<QueryGovernmentBodiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GovernmentBodyWhereInput | null, orderBy?: prisma.GovernmentBodyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody[]> | prisma.GovernmentBody[]
  }
  governmentBodiesConnection: {
    type: 'GovernmentBodyConnection'
    args: Record<QueryGovernmentBodiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GovernmentBodyWhereInput | null, orderBy?: prisma.GovernmentBodyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyConnection> | prisma.GovernmentBodyConnection
  }
  governmentActor: {
    type: 'GovernmentActor'
    args: Record<QueryGovernmentActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GovernmentActorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActor | null> | prisma.GovernmentActor | null
  }
  governmentActors: {
    type: 'GovernmentActor'
    args: Record<QueryGovernmentActorsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GovernmentActorWhereInput | null, orderBy?: prisma.GovernmentActorOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActor[]> | prisma.GovernmentActor[]
  }
  governmentActorsConnection: {
    type: 'GovernmentActorConnection'
    args: Record<QueryGovernmentActorsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GovernmentActorWhereInput | null, orderBy?: prisma.GovernmentActorOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorConnection> | prisma.GovernmentActorConnection
  }
  governmentActorProfile: {
    type: 'GovernmentActorProfile'
    args: Record<QueryGovernmentActorProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GovernmentActorProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfile | null> | prisma.GovernmentActorProfile | null
  }
  governmentActorProfiles: {
    type: 'GovernmentActorProfile'
    args: Record<QueryGovernmentActorProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GovernmentActorProfileWhereInput | null, orderBy?: prisma.GovernmentActorProfileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfile[]> | prisma.GovernmentActorProfile[]
  }
  governmentActorProfilesConnection: {
    type: 'GovernmentActorProfileConnection'
    args: Record<QueryGovernmentActorProfilesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GovernmentActorProfileWhereInput | null, orderBy?: prisma.GovernmentActorProfileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfileConnection> | prisma.GovernmentActorProfileConnection
  }
  governmentBodyMetadata: {
    type: 'GovernmentBodyMetadata'
    args: Record<QueryGovernmentBodyMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GovernmentBodyMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadata | null> | prisma.GovernmentBodyMetadata | null
  }
  governmentBodyMetadatas: {
    type: 'GovernmentBodyMetadata'
    args: Record<QueryGovernmentBodyMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GovernmentBodyMetadataWhereInput | null, orderBy?: prisma.GovernmentBodyMetadataOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadata[]> | prisma.GovernmentBodyMetadata[]
  }
  governmentBodyMetadatasConnection: {
    type: 'GovernmentBodyMetadataConnection'
    args: Record<QueryGovernmentBodyMetadatasConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GovernmentBodyMetadataWhereInput | null, orderBy?: prisma.GovernmentBodyMetadataOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadataConnection> | prisma.GovernmentBodyMetadataConnection
  }
  affiliation: {
    type: 'Affiliation'
    args: Record<QueryAffiliationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AffiliationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Affiliation | null> | prisma.Affiliation | null
  }
  affiliations: {
    type: 'Affiliation'
    args: Record<QueryAffiliationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AffiliationWhereInput | null, orderBy?: prisma.AffiliationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Affiliation[]> | prisma.Affiliation[]
  }
  affiliationsConnection: {
    type: 'AffiliationConnection'
    args: Record<QueryAffiliationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AffiliationWhereInput | null, orderBy?: prisma.AffiliationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationConnection> | prisma.AffiliationConnection
  }
  affiliationRole: {
    type: 'AffiliationRole'
    args: Record<QueryAffiliationRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AffiliationRoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRole | null> | prisma.AffiliationRole | null
  }
  affiliationRoles: {
    type: 'AffiliationRole'
    args: Record<QueryAffiliationRolesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AffiliationRoleWhereInput | null, orderBy?: prisma.AffiliationRoleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRole[]> | prisma.AffiliationRole[]
  }
  affiliationRolesConnection: {
    type: 'AffiliationRoleConnection'
    args: Record<QueryAffiliationRolesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AffiliationRoleWhereInput | null, orderBy?: prisma.AffiliationRoleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRoleConnection> | prisma.AffiliationRoleConnection
  }
}
  

// Types for EmailAddress

type EmailAddressObject =
  | EmailAddressFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'payload', args?: [] | false, alias?: string  } 
  | { name: 'metadata', args?: [] | false, alias?: string  } 

type EmailAddressFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'payload'
  | 'metadata'



  

export interface EmailAddressFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  payload: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  metadata: {
    type: 'ContactMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmailAddress">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata> | prisma.ContactMetadata
  }
}
  

// Types for ContactMetadata

type ContactMetadataObject =
  | ContactMetadataFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'isPrimary', args?: [] | false, alias?: string  } 
  | { name: 'isPublic', args?: [] | false, alias?: string  } 
  | { name: 'isVerified', args?: [] | false, alias?: string  } 

type ContactMetadataFields =
  | 'id'
  | 'isPrimary'
  | 'isPublic'
  | 'isVerified'



  

export interface ContactMetadataFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPrimary: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isPublic: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isVerified: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EmailAddressConnection

type EmailAddressConnectionObject =
  | EmailAddressConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EmailAddressConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EmailAddressConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmailAddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EmailAddressEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EmailAddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddressEdge[]> | prisma.EmailAddressEdge[]
  }
  aggregate: {
    type: 'AggregateEmailAddress'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmailAddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEmailAddress> | prisma.AggregateEmailAddress
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EmailAddressEdge

type EmailAddressEdgeObject =
  | EmailAddressEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EmailAddressEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EmailAddressEdgeFieldDetails {
  node: {
    type: 'EmailAddress'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmailAddressEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress> | prisma.EmailAddress
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEmailAddress

type AggregateEmailAddressObject =
  | AggregateEmailAddressFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEmailAddressFields =
  | 'count'



  

export interface AggregateEmailAddressFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PhoneNumber

type PhoneNumberObject =
  | PhoneNumberFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'payload', args?: [] | false, alias?: string  } 
  | { name: 'metadata', args?: [] | false, alias?: string  } 

type PhoneNumberFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'payload'
  | 'metadata'



  

export interface PhoneNumberFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  payload: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  metadata: {
    type: 'ContactMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumber">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata> | prisma.ContactMetadata
  }
}
  

// Types for PhoneNumberConnection

type PhoneNumberConnectionObject =
  | PhoneNumberConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PhoneNumberConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PhoneNumberConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PhoneNumberEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumberEdge[]> | prisma.PhoneNumberEdge[]
  }
  aggregate: {
    type: 'AggregatePhoneNumber'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePhoneNumber> | prisma.AggregatePhoneNumber
  }
}
  

// Types for PhoneNumberEdge

type PhoneNumberEdgeObject =
  | PhoneNumberEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PhoneNumberEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PhoneNumberEdgeFieldDetails {
  node: {
    type: 'PhoneNumber'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber> | prisma.PhoneNumber
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePhoneNumber

type AggregatePhoneNumberObject =
  | AggregatePhoneNumberFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePhoneNumberFields =
  | 'count'



  

export interface AggregatePhoneNumberFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ExternalLink

type ExternalLinkObject =
  | ExternalLinkFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'payload', args?: [] | false, alias?: string  } 
  | { name: 'metadata', args?: [] | false, alias?: string  } 

type ExternalLinkFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'payload'
  | 'metadata'



  

export interface ExternalLinkFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  payload: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  metadata: {
    type: 'ContactMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ExternalLink">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata> | prisma.ContactMetadata
  }
}
  

// Types for ExternalLinkConnection

type ExternalLinkConnectionObject =
  | ExternalLinkConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ExternalLinkConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ExternalLinkConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ExternalLinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ExternalLinkEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ExternalLinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLinkEdge[]> | prisma.ExternalLinkEdge[]
  }
  aggregate: {
    type: 'AggregateExternalLink'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ExternalLinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateExternalLink> | prisma.AggregateExternalLink
  }
}
  

// Types for ExternalLinkEdge

type ExternalLinkEdgeObject =
  | ExternalLinkEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ExternalLinkEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ExternalLinkEdgeFieldDetails {
  node: {
    type: 'ExternalLink'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ExternalLinkEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLink> | prisma.ExternalLink
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateExternalLink

type AggregateExternalLinkObject =
  | AggregateExternalLinkFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateExternalLinkFields =
  | 'count'



  

export interface AggregateExternalLinkFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ContactMetadataConnection

type ContactMetadataConnectionObject =
  | ContactMetadataConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ContactMetadataConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ContactMetadataConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ContactMetadataEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ContactMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadataEdge[]> | prisma.ContactMetadataEdge[]
  }
  aggregate: {
    type: 'AggregateContactMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateContactMetadata> | prisma.AggregateContactMetadata
  }
}
  

// Types for ContactMetadataEdge

type ContactMetadataEdgeObject =
  | ContactMetadataEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ContactMetadataEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ContactMetadataEdgeFieldDetails {
  node: {
    type: 'ContactMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactMetadataEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata> | prisma.ContactMetadata
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateContactMetadata

type AggregateContactMetadataObject =
  | AggregateContactMetadataFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateContactMetadataFields =
  | 'count'



  

export interface AggregateContactMetadataFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Location

type LocationObject =
  | LocationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'formatted_address', args?: [] | false, alias?: string  } 
  | { name: 'googleId', args?: [] | false, alias?: string  } 
  | { name: 'placeId', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 
  | { name: 'metadata', args?: [] | false, alias?: string  } 

type LocationFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'formatted_address'
  | 'googleId'
  | 'placeId'
  | 'location'
  | 'metadata'



  

export interface LocationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  formatted_address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  googleId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  placeId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'Geometry'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Location">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geometry | null> | prisma.Geometry | null
  }
  metadata: {
    type: 'LocationMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Location">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadata> | prisma.LocationMetadata
  }
}
  

// Types for Geometry

type GeometryObject =
  | GeometryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'lat', args?: [] | false, alias?: string  } 
  | { name: 'lng', args?: [] | false, alias?: string  } 

type GeometryFields =
  | 'id'
  | 'lat'
  | 'lng'



  

export interface GeometryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lat: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lng: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LocationMetadata

type LocationMetadataObject =
  | LocationMetadataFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'isPrimary', args?: [] | false, alias?: string  } 
  | { name: 'isPublic', args?: [] | false, alias?: string  } 
  | { name: 'isVerified', args?: [] | false, alias?: string  } 

type LocationMetadataFields =
  | 'id'
  | 'isPrimary'
  | 'isPublic'
  | 'isVerified'



  

export interface LocationMetadataFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPrimary: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isPublic: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isVerified: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for LocationConnection

type LocationConnectionObject =
  | LocationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LocationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LocationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LocationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LocationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationEdge[]> | prisma.LocationEdge[]
  }
  aggregate: {
    type: 'AggregateLocation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLocation> | prisma.AggregateLocation
  }
}
  

// Types for LocationEdge

type LocationEdgeObject =
  | LocationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LocationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LocationEdgeFieldDetails {
  node: {
    type: 'Location'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location> | prisma.Location
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLocation

type AggregateLocationObject =
  | AggregateLocationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLocationFields =
  | 'count'



  

export interface AggregateLocationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LocationMetadataConnection

type LocationMetadataConnectionObject =
  | LocationMetadataConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LocationMetadataConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LocationMetadataConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LocationMetadataEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LocationMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadataEdge[]> | prisma.LocationMetadataEdge[]
  }
  aggregate: {
    type: 'AggregateLocationMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLocationMetadata> | prisma.AggregateLocationMetadata
  }
}
  

// Types for LocationMetadataEdge

type LocationMetadataEdgeObject =
  | LocationMetadataEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LocationMetadataEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LocationMetadataEdgeFieldDetails {
  node: {
    type: 'LocationMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationMetadataEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadata> | prisma.LocationMetadata
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLocationMetadata

type AggregateLocationMetadataObject =
  | AggregateLocationMetadataFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLocationMetadataFields =
  | 'count'



  

export interface AggregateLocationMetadataFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GeometryConnection

type GeometryConnectionObject =
  | GeometryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GeometryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GeometryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeometryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GeometryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GeometryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeometryEdge[]> | prisma.GeometryEdge[]
  }
  aggregate: {
    type: 'AggregateGeometry'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeometryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGeometry> | prisma.AggregateGeometry
  }
}
  

// Types for GeometryEdge

type GeometryEdgeObject =
  | GeometryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GeometryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GeometryEdgeFieldDetails {
  node: {
    type: 'Geometry'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeometryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geometry> | prisma.Geometry
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGeometry

type AggregateGeometryObject =
  | AggregateGeometryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGeometryFields =
  | 'count'



  

export interface AggregateGeometryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GovernmentFacility

type GovernmentFacilityObject =
  | GovernmentFacilityFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 
  | { name: 'actors', args?: GovernmentFacilityActorsArgs[] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'fax', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'metadata', args?: [] | false, alias?: string  } 

type GovernmentFacilityFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'type'
  | 'location'
  | 'actors'
  | 'phone'
  | 'fax'
  | 'email'
  | 'url'
  | 'metadata'


type GovernmentFacilityActorsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface GovernmentFacilityFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'GovernmentFacilityType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentFacility">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacilityType> | prisma.GovernmentFacilityType
  }
  location: {
    type: 'Location'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentFacility">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location> | prisma.Location
  }
  actors: {
    type: 'GovernmentActor'
    args: Record<GovernmentFacilityActorsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentFacility">,
      args: { where?: GovernmentActorWhereInput | null, orderBy?: prisma.GovernmentActorOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActor[]> | prisma.GovernmentActor[]
  }
  phone: {
    type: 'PhoneNumber'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentFacility">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber | null> | prisma.PhoneNumber | null
  }
  fax: {
    type: 'PhoneNumber'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentFacility">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber | null> | prisma.PhoneNumber | null
  }
  email: {
    type: 'EmailAddress'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentFacility">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress | null> | prisma.EmailAddress | null
  }
  url: {
    type: 'ExternalLink'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentFacility">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLink | null> | prisma.ExternalLink | null
  }
  metadata: {
    type: 'FacilityMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentFacility">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadata> | prisma.FacilityMetadata
  }
}
  

// Types for GovernmentActor

type GovernmentActorObject =
  | GovernmentActorFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'profile', args?: [] | false, alias?: string  } 
  | { name: 'affiliations', args?: GovernmentActorAffiliationsArgs[] | false, alias?: string  } 

type GovernmentActorFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'profile'
  | 'affiliations'


type GovernmentActorAffiliationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface GovernmentActorFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  profile: {
    type: 'GovernmentActorProfile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActor">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfile> | prisma.GovernmentActorProfile
  }
  affiliations: {
    type: 'Affiliation'
    args: Record<GovernmentActorAffiliationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActor">,
      args: { where?: AffiliationWhereInput | null, orderBy?: prisma.AffiliationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Affiliation[]> | prisma.Affiliation[]
  }
}
  

// Types for GovernmentActorProfile

type GovernmentActorProfileObject =
  | GovernmentActorProfileFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: GovernmentActorProfileEmailArgs[] | false, alias?: string  } 
  | { name: 'phone_number', args?: GovernmentActorProfilePhone_numberArgs[] | false, alias?: string  } 

type GovernmentActorProfileFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'firstName'
  | 'lastName'
  | 'email'
  | 'phone_number'


type GovernmentActorProfileEmailArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type GovernmentActorProfilePhone_numberArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface GovernmentActorProfileFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'EmailAddress'
    args: Record<GovernmentActorProfileEmailArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorProfile">,
      args: { where?: EmailAddressWhereInput | null, orderBy?: prisma.EmailAddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress[]> | prisma.EmailAddress[]
  }
  phone_number: {
    type: 'PhoneNumber'
    args: Record<GovernmentActorProfilePhone_numberArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorProfile">,
      args: { where?: PhoneNumberWhereInput | null, orderBy?: prisma.PhoneNumberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber[]> | prisma.PhoneNumber[]
  }
}
  

// Types for Affiliation

type AffiliationObject =
  | AffiliationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'actor', args?: [] | false, alias?: string  } 
  | { name: 'body', args?: [] | false, alias?: string  } 
  | { name: 'dateStarted', args?: [] | false, alias?: string  } 
  | { name: 'dateEnded', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'notes', args?: [] | false, alias?: string  } 

type AffiliationFields =
  | 'id'
  | 'actor'
  | 'body'
  | 'dateStarted'
  | 'dateEnded'
  | 'role'
  | 'notes'



  

export interface AffiliationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  actor: {
    type: 'GovernmentActor'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Affiliation">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActor> | prisma.GovernmentActor
  }
  body: {
    type: 'GovernmentBody'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Affiliation">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody> | prisma.GovernmentBody
  }
  dateStarted: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  dateEnded: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'AffiliationRole'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Affiliation">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRole | null> | prisma.AffiliationRole | null
  }
  notes: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GovernmentBody

type GovernmentBodyObject =
  | GovernmentBodyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'facilities', args?: GovernmentBodyFacilitiesArgs[] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'abbr', args?: [] | false, alias?: string  } 
  | { name: 'parent', args?: [] | false, alias?: string  } 
  | { name: 'children', args?: GovernmentBodyChildrenArgs[] | false, alias?: string  } 
  | { name: 'metadata', args?: [] | false, alias?: string  } 

type GovernmentBodyFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'facilities'
  | 'name'
  | 'abbr'
  | 'parent'
  | 'children'
  | 'metadata'


type GovernmentBodyFacilitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type GovernmentBodyChildrenArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface GovernmentBodyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  facilities: {
    type: 'GovernmentFacility'
    args: Record<GovernmentBodyFacilitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBody">,
      args: { where?: GovernmentFacilityWhereInput | null, orderBy?: prisma.GovernmentFacilityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacility[]> | prisma.GovernmentFacility[]
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  abbr: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  parent: {
    type: 'GovernmentBody'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentBody">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody | null> | prisma.GovernmentBody | null
  }
  children: {
    type: 'GovernmentBody'
    args: Record<GovernmentBodyChildrenArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBody">,
      args: { where?: GovernmentBodyWhereInput | null, orderBy?: prisma.GovernmentBodyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody[]> | prisma.GovernmentBody[]
  }
  metadata: {
    type: 'GovernmentBodyMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBody">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadata> | prisma.GovernmentBodyMetadata
  }
}
  

// Types for GovernmentBodyMetadata

type GovernmentBodyMetadataObject =
  | GovernmentBodyMetadataFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'hasChildren', args?: [] | false, alias?: string  } 
  | { name: 'hasParent', args?: [] | false, alias?: string  } 

type GovernmentBodyMetadataFields =
  | 'id'
  | 'hasChildren'
  | 'hasParent'



  

export interface GovernmentBodyMetadataFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasChildren: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hasParent: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for AffiliationRole

type AffiliationRoleObject =
  | AffiliationRoleFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'body', args?: [] | false, alias?: string  } 
  | { name: 'abbr', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type AffiliationRoleFields =
  | 'id'
  | 'body'
  | 'abbr'
  | 'name'



  

export interface AffiliationRoleFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  body: {
    type: 'GovernmentBody'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationRole">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody> | prisma.GovernmentBody
  }
  abbr: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FacilityMetadata

type FacilityMetadataObject =
  | FacilityMetadataFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'isPrimary', args?: [] | false, alias?: string  } 
  | { name: 'isPublic', args?: [] | false, alias?: string  } 
  | { name: 'isVerified', args?: [] | false, alias?: string  } 

type FacilityMetadataFields =
  | 'id'
  | 'isPrimary'
  | 'isPublic'
  | 'isVerified'



  

export interface FacilityMetadataFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPrimary: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isPublic: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isVerified: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GovernmentFacilityConnection

type GovernmentFacilityConnectionObject =
  | GovernmentFacilityConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GovernmentFacilityConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GovernmentFacilityConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentFacilityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GovernmentFacilityEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentFacilityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacilityEdge[]> | prisma.GovernmentFacilityEdge[]
  }
  aggregate: {
    type: 'AggregateGovernmentFacility'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentFacilityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGovernmentFacility> | prisma.AggregateGovernmentFacility
  }
}
  

// Types for GovernmentFacilityEdge

type GovernmentFacilityEdgeObject =
  | GovernmentFacilityEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GovernmentFacilityEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GovernmentFacilityEdgeFieldDetails {
  node: {
    type: 'GovernmentFacility'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentFacilityEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacility> | prisma.GovernmentFacility
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGovernmentFacility

type AggregateGovernmentFacilityObject =
  | AggregateGovernmentFacilityFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGovernmentFacilityFields =
  | 'count'



  

export interface AggregateGovernmentFacilityFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FacilityMetadataConnection

type FacilityMetadataConnectionObject =
  | FacilityMetadataConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FacilityMetadataConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FacilityMetadataConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FacilityMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FacilityMetadataEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FacilityMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadataEdge[]> | prisma.FacilityMetadataEdge[]
  }
  aggregate: {
    type: 'AggregateFacilityMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FacilityMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFacilityMetadata> | prisma.AggregateFacilityMetadata
  }
}
  

// Types for FacilityMetadataEdge

type FacilityMetadataEdgeObject =
  | FacilityMetadataEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FacilityMetadataEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FacilityMetadataEdgeFieldDetails {
  node: {
    type: 'FacilityMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FacilityMetadataEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadata> | prisma.FacilityMetadata
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFacilityMetadata

type AggregateFacilityMetadataObject =
  | AggregateFacilityMetadataFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFacilityMetadataFields =
  | 'count'



  

export interface AggregateFacilityMetadataFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'cognitoId', args?: [] | false, alias?: string  } 
  | { name: 'profile', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'handle'
  | 'cognitoId'
  | 'profile'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  cognitoId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  profile: {
    type: 'UserProfile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfile> | prisma.UserProfile
  }
}
  

// Types for UserProfile

type UserProfileObject =
  | UserProfileFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: UserProfileEmailArgs[] | false, alias?: string  } 
  | { name: 'phone_number', args?: UserProfilePhone_numberArgs[] | false, alias?: string  } 

type UserProfileFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'user'
  | 'firstName'
  | 'lastName'
  | 'avatar'
  | 'location'
  | 'email'
  | 'phone_number'


type UserProfileEmailArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserProfilePhone_numberArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserProfileFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserProfile">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  avatar: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'EmailAddress'
    args: Record<UserProfileEmailArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserProfile">,
      args: { where?: EmailAddressWhereInput | null, orderBy?: prisma.EmailAddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress[]> | prisma.EmailAddress[]
  }
  phone_number: {
    type: 'PhoneNumber'
    args: Record<UserProfilePhone_numberArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserProfile">,
      args: { where?: PhoneNumberWhereInput | null, orderBy?: prisma.PhoneNumberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber[]> | prisma.PhoneNumber[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserProfileConnection

type UserProfileConnectionObject =
  | UserProfileConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserProfileConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserProfileConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserProfileEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfileEdge[]> | prisma.UserProfileEdge[]
  }
  aggregate: {
    type: 'AggregateUserProfile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUserProfile> | prisma.AggregateUserProfile
  }
}
  

// Types for UserProfileEdge

type UserProfileEdgeObject =
  | UserProfileEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserProfileEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserProfileEdgeFieldDetails {
  node: {
    type: 'UserProfile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserProfileEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfile> | prisma.UserProfile
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUserProfile

type AggregateUserProfileObject =
  | AggregateUserProfileFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserProfileFields =
  | 'count'



  

export interface AggregateUserProfileFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GovernmentBodyConnection

type GovernmentBodyConnectionObject =
  | GovernmentBodyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GovernmentBodyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GovernmentBodyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBodyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GovernmentBodyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBodyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyEdge[]> | prisma.GovernmentBodyEdge[]
  }
  aggregate: {
    type: 'AggregateGovernmentBody'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBodyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGovernmentBody> | prisma.AggregateGovernmentBody
  }
}
  

// Types for GovernmentBodyEdge

type GovernmentBodyEdgeObject =
  | GovernmentBodyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GovernmentBodyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GovernmentBodyEdgeFieldDetails {
  node: {
    type: 'GovernmentBody'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBodyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody> | prisma.GovernmentBody
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGovernmentBody

type AggregateGovernmentBodyObject =
  | AggregateGovernmentBodyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGovernmentBodyFields =
  | 'count'



  

export interface AggregateGovernmentBodyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GovernmentActorConnection

type GovernmentActorConnectionObject =
  | GovernmentActorConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GovernmentActorConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GovernmentActorConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GovernmentActorEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorEdge[]> | prisma.GovernmentActorEdge[]
  }
  aggregate: {
    type: 'AggregateGovernmentActor'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGovernmentActor> | prisma.AggregateGovernmentActor
  }
}
  

// Types for GovernmentActorEdge

type GovernmentActorEdgeObject =
  | GovernmentActorEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GovernmentActorEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GovernmentActorEdgeFieldDetails {
  node: {
    type: 'GovernmentActor'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActor> | prisma.GovernmentActor
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGovernmentActor

type AggregateGovernmentActorObject =
  | AggregateGovernmentActorFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGovernmentActorFields =
  | 'count'



  

export interface AggregateGovernmentActorFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GovernmentActorProfileConnection

type GovernmentActorProfileConnectionObject =
  | GovernmentActorProfileConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GovernmentActorProfileConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GovernmentActorProfileConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GovernmentActorProfileEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfileEdge[]> | prisma.GovernmentActorProfileEdge[]
  }
  aggregate: {
    type: 'AggregateGovernmentActorProfile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGovernmentActorProfile> | prisma.AggregateGovernmentActorProfile
  }
}
  

// Types for GovernmentActorProfileEdge

type GovernmentActorProfileEdgeObject =
  | GovernmentActorProfileEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GovernmentActorProfileEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GovernmentActorProfileEdgeFieldDetails {
  node: {
    type: 'GovernmentActorProfile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorProfileEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfile> | prisma.GovernmentActorProfile
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGovernmentActorProfile

type AggregateGovernmentActorProfileObject =
  | AggregateGovernmentActorProfileFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGovernmentActorProfileFields =
  | 'count'



  

export interface AggregateGovernmentActorProfileFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GovernmentBodyMetadataConnection

type GovernmentBodyMetadataConnectionObject =
  | GovernmentBodyMetadataConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GovernmentBodyMetadataConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GovernmentBodyMetadataConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBodyMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GovernmentBodyMetadataEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBodyMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadataEdge[]> | prisma.GovernmentBodyMetadataEdge[]
  }
  aggregate: {
    type: 'AggregateGovernmentBodyMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBodyMetadataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGovernmentBodyMetadata> | prisma.AggregateGovernmentBodyMetadata
  }
}
  

// Types for GovernmentBodyMetadataEdge

type GovernmentBodyMetadataEdgeObject =
  | GovernmentBodyMetadataEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GovernmentBodyMetadataEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GovernmentBodyMetadataEdgeFieldDetails {
  node: {
    type: 'GovernmentBodyMetadata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBodyMetadataEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadata> | prisma.GovernmentBodyMetadata
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGovernmentBodyMetadata

type AggregateGovernmentBodyMetadataObject =
  | AggregateGovernmentBodyMetadataFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGovernmentBodyMetadataFields =
  | 'count'



  

export interface AggregateGovernmentBodyMetadataFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AffiliationConnection

type AffiliationConnectionObject =
  | AffiliationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AffiliationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AffiliationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AffiliationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationEdge[]> | prisma.AffiliationEdge[]
  }
  aggregate: {
    type: 'AggregateAffiliation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAffiliation> | prisma.AggregateAffiliation
  }
}
  

// Types for AffiliationEdge

type AffiliationEdgeObject =
  | AffiliationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AffiliationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AffiliationEdgeFieldDetails {
  node: {
    type: 'Affiliation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Affiliation> | prisma.Affiliation
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAffiliation

type AggregateAffiliationObject =
  | AggregateAffiliationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAffiliationFields =
  | 'count'



  

export interface AggregateAffiliationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AffiliationRoleConnection

type AffiliationRoleConnectionObject =
  | AffiliationRoleConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AffiliationRoleConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AffiliationRoleConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationRoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AffiliationRoleEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationRoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRoleEdge[]> | prisma.AffiliationRoleEdge[]
  }
  aggregate: {
    type: 'AggregateAffiliationRole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationRoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAffiliationRole> | prisma.AggregateAffiliationRole
  }
}
  

// Types for AffiliationRoleEdge

type AffiliationRoleEdgeObject =
  | AffiliationRoleEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AffiliationRoleEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AffiliationRoleEdgeFieldDetails {
  node: {
    type: 'AffiliationRole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationRoleEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRole> | prisma.AffiliationRole
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAffiliationRole

type AggregateAffiliationRoleObject =
  | AggregateAffiliationRoleFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAffiliationRoleFields =
  | 'count'



  

export interface AggregateAffiliationRoleFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createEmailAddress', args?: MutationCreateEmailAddressArgs[] | false, alias?: string  } 
  | { name: 'updateEmailAddress', args?: MutationUpdateEmailAddressArgs[] | false, alias?: string  } 
  | { name: 'updateManyEmailAddresses', args?: MutationUpdateManyEmailAddressesArgs[] | false, alias?: string  } 
  | { name: 'upsertEmailAddress', args?: MutationUpsertEmailAddressArgs[] | false, alias?: string  } 
  | { name: 'deleteEmailAddress', args?: MutationDeleteEmailAddressArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEmailAddresses', args?: MutationDeleteManyEmailAddressesArgs[] | false, alias?: string  } 
  | { name: 'createPhoneNumber', args?: MutationCreatePhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'updatePhoneNumber', args?: MutationUpdatePhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'updateManyPhoneNumbers', args?: MutationUpdateManyPhoneNumbersArgs[] | false, alias?: string  } 
  | { name: 'upsertPhoneNumber', args?: MutationUpsertPhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'deletePhoneNumber', args?: MutationDeletePhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPhoneNumbers', args?: MutationDeleteManyPhoneNumbersArgs[] | false, alias?: string  } 
  | { name: 'createExternalLink', args?: MutationCreateExternalLinkArgs[] | false, alias?: string  } 
  | { name: 'updateExternalLink', args?: MutationUpdateExternalLinkArgs[] | false, alias?: string  } 
  | { name: 'updateManyExternalLinks', args?: MutationUpdateManyExternalLinksArgs[] | false, alias?: string  } 
  | { name: 'upsertExternalLink', args?: MutationUpsertExternalLinkArgs[] | false, alias?: string  } 
  | { name: 'deleteExternalLink', args?: MutationDeleteExternalLinkArgs[] | false, alias?: string  } 
  | { name: 'deleteManyExternalLinks', args?: MutationDeleteManyExternalLinksArgs[] | false, alias?: string  } 
  | { name: 'createContactMetadata', args?: MutationCreateContactMetadataArgs[] | false, alias?: string  } 
  | { name: 'updateContactMetadata', args?: MutationUpdateContactMetadataArgs[] | false, alias?: string  } 
  | { name: 'updateManyContactMetadatas', args?: MutationUpdateManyContactMetadatasArgs[] | false, alias?: string  } 
  | { name: 'upsertContactMetadata', args?: MutationUpsertContactMetadataArgs[] | false, alias?: string  } 
  | { name: 'deleteContactMetadata', args?: MutationDeleteContactMetadataArgs[] | false, alias?: string  } 
  | { name: 'deleteManyContactMetadatas', args?: MutationDeleteManyContactMetadatasArgs[] | false, alias?: string  } 
  | { name: 'createLocation', args?: MutationCreateLocationArgs[] | false, alias?: string  } 
  | { name: 'updateLocation', args?: MutationUpdateLocationArgs[] | false, alias?: string  } 
  | { name: 'updateManyLocations', args?: MutationUpdateManyLocationsArgs[] | false, alias?: string  } 
  | { name: 'upsertLocation', args?: MutationUpsertLocationArgs[] | false, alias?: string  } 
  | { name: 'deleteLocation', args?: MutationDeleteLocationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLocations', args?: MutationDeleteManyLocationsArgs[] | false, alias?: string  } 
  | { name: 'createLocationMetadata', args?: MutationCreateLocationMetadataArgs[] | false, alias?: string  } 
  | { name: 'updateLocationMetadata', args?: MutationUpdateLocationMetadataArgs[] | false, alias?: string  } 
  | { name: 'updateManyLocationMetadatas', args?: MutationUpdateManyLocationMetadatasArgs[] | false, alias?: string  } 
  | { name: 'upsertLocationMetadata', args?: MutationUpsertLocationMetadataArgs[] | false, alias?: string  } 
  | { name: 'deleteLocationMetadata', args?: MutationDeleteLocationMetadataArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLocationMetadatas', args?: MutationDeleteManyLocationMetadatasArgs[] | false, alias?: string  } 
  | { name: 'createGeometry', args?: MutationCreateGeometryArgs[] | false, alias?: string  } 
  | { name: 'updateGeometry', args?: MutationUpdateGeometryArgs[] | false, alias?: string  } 
  | { name: 'updateManyGeometries', args?: MutationUpdateManyGeometriesArgs[] | false, alias?: string  } 
  | { name: 'upsertGeometry', args?: MutationUpsertGeometryArgs[] | false, alias?: string  } 
  | { name: 'deleteGeometry', args?: MutationDeleteGeometryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGeometries', args?: MutationDeleteManyGeometriesArgs[] | false, alias?: string  } 
  | { name: 'createGovernmentFacility', args?: MutationCreateGovernmentFacilityArgs[] | false, alias?: string  } 
  | { name: 'updateGovernmentFacility', args?: MutationUpdateGovernmentFacilityArgs[] | false, alias?: string  } 
  | { name: 'updateManyGovernmentFacilities', args?: MutationUpdateManyGovernmentFacilitiesArgs[] | false, alias?: string  } 
  | { name: 'upsertGovernmentFacility', args?: MutationUpsertGovernmentFacilityArgs[] | false, alias?: string  } 
  | { name: 'deleteGovernmentFacility', args?: MutationDeleteGovernmentFacilityArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGovernmentFacilities', args?: MutationDeleteManyGovernmentFacilitiesArgs[] | false, alias?: string  } 
  | { name: 'createFacilityMetadata', args?: MutationCreateFacilityMetadataArgs[] | false, alias?: string  } 
  | { name: 'updateFacilityMetadata', args?: MutationUpdateFacilityMetadataArgs[] | false, alias?: string  } 
  | { name: 'updateManyFacilityMetadatas', args?: MutationUpdateManyFacilityMetadatasArgs[] | false, alias?: string  } 
  | { name: 'upsertFacilityMetadata', args?: MutationUpsertFacilityMetadataArgs[] | false, alias?: string  } 
  | { name: 'deleteFacilityMetadata', args?: MutationDeleteFacilityMetadataArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFacilityMetadatas', args?: MutationDeleteManyFacilityMetadatasArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createUserProfile', args?: MutationCreateUserProfileArgs[] | false, alias?: string  } 
  | { name: 'updateUserProfile', args?: MutationUpdateUserProfileArgs[] | false, alias?: string  } 
  | { name: 'updateManyUserProfiles', args?: MutationUpdateManyUserProfilesArgs[] | false, alias?: string  } 
  | { name: 'upsertUserProfile', args?: MutationUpsertUserProfileArgs[] | false, alias?: string  } 
  | { name: 'deleteUserProfile', args?: MutationDeleteUserProfileArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUserProfiles', args?: MutationDeleteManyUserProfilesArgs[] | false, alias?: string  } 
  | { name: 'createGovernmentBody', args?: MutationCreateGovernmentBodyArgs[] | false, alias?: string  } 
  | { name: 'updateGovernmentBody', args?: MutationUpdateGovernmentBodyArgs[] | false, alias?: string  } 
  | { name: 'updateManyGovernmentBodies', args?: MutationUpdateManyGovernmentBodiesArgs[] | false, alias?: string  } 
  | { name: 'upsertGovernmentBody', args?: MutationUpsertGovernmentBodyArgs[] | false, alias?: string  } 
  | { name: 'deleteGovernmentBody', args?: MutationDeleteGovernmentBodyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGovernmentBodies', args?: MutationDeleteManyGovernmentBodiesArgs[] | false, alias?: string  } 
  | { name: 'createGovernmentActor', args?: MutationCreateGovernmentActorArgs[] | false, alias?: string  } 
  | { name: 'updateGovernmentActor', args?: MutationUpdateGovernmentActorArgs[] | false, alias?: string  } 
  | { name: 'upsertGovernmentActor', args?: MutationUpsertGovernmentActorArgs[] | false, alias?: string  } 
  | { name: 'deleteGovernmentActor', args?: MutationDeleteGovernmentActorArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGovernmentActors', args?: MutationDeleteManyGovernmentActorsArgs[] | false, alias?: string  } 
  | { name: 'createGovernmentActorProfile', args?: MutationCreateGovernmentActorProfileArgs[] | false, alias?: string  } 
  | { name: 'updateGovernmentActorProfile', args?: MutationUpdateGovernmentActorProfileArgs[] | false, alias?: string  } 
  | { name: 'updateManyGovernmentActorProfiles', args?: MutationUpdateManyGovernmentActorProfilesArgs[] | false, alias?: string  } 
  | { name: 'upsertGovernmentActorProfile', args?: MutationUpsertGovernmentActorProfileArgs[] | false, alias?: string  } 
  | { name: 'deleteGovernmentActorProfile', args?: MutationDeleteGovernmentActorProfileArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGovernmentActorProfiles', args?: MutationDeleteManyGovernmentActorProfilesArgs[] | false, alias?: string  } 
  | { name: 'createGovernmentBodyMetadata', args?: MutationCreateGovernmentBodyMetadataArgs[] | false, alias?: string  } 
  | { name: 'updateGovernmentBodyMetadata', args?: MutationUpdateGovernmentBodyMetadataArgs[] | false, alias?: string  } 
  | { name: 'updateManyGovernmentBodyMetadatas', args?: MutationUpdateManyGovernmentBodyMetadatasArgs[] | false, alias?: string  } 
  | { name: 'upsertGovernmentBodyMetadata', args?: MutationUpsertGovernmentBodyMetadataArgs[] | false, alias?: string  } 
  | { name: 'deleteGovernmentBodyMetadata', args?: MutationDeleteGovernmentBodyMetadataArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGovernmentBodyMetadatas', args?: MutationDeleteManyGovernmentBodyMetadatasArgs[] | false, alias?: string  } 
  | { name: 'createAffiliation', args?: MutationCreateAffiliationArgs[] | false, alias?: string  } 
  | { name: 'updateAffiliation', args?: MutationUpdateAffiliationArgs[] | false, alias?: string  } 
  | { name: 'updateManyAffiliations', args?: MutationUpdateManyAffiliationsArgs[] | false, alias?: string  } 
  | { name: 'upsertAffiliation', args?: MutationUpsertAffiliationArgs[] | false, alias?: string  } 
  | { name: 'deleteAffiliation', args?: MutationDeleteAffiliationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAffiliations', args?: MutationDeleteManyAffiliationsArgs[] | false, alias?: string  } 
  | { name: 'createAffiliationRole', args?: MutationCreateAffiliationRoleArgs[] | false, alias?: string  } 
  | { name: 'updateAffiliationRole', args?: MutationUpdateAffiliationRoleArgs[] | false, alias?: string  } 
  | { name: 'updateManyAffiliationRoles', args?: MutationUpdateManyAffiliationRolesArgs[] | false, alias?: string  } 
  | { name: 'upsertAffiliationRole', args?: MutationUpsertAffiliationRoleArgs[] | false, alias?: string  } 
  | { name: 'deleteAffiliationRole', args?: MutationDeleteAffiliationRoleArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAffiliationRoles', args?: MutationDeleteManyAffiliationRolesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createEmailAddress'
  | 'updateEmailAddress'
  | 'updateManyEmailAddresses'
  | 'upsertEmailAddress'
  | 'deleteEmailAddress'
  | 'deleteManyEmailAddresses'
  | 'createPhoneNumber'
  | 'updatePhoneNumber'
  | 'updateManyPhoneNumbers'
  | 'upsertPhoneNumber'
  | 'deletePhoneNumber'
  | 'deleteManyPhoneNumbers'
  | 'createExternalLink'
  | 'updateExternalLink'
  | 'updateManyExternalLinks'
  | 'upsertExternalLink'
  | 'deleteExternalLink'
  | 'deleteManyExternalLinks'
  | 'createContactMetadata'
  | 'updateContactMetadata'
  | 'updateManyContactMetadatas'
  | 'upsertContactMetadata'
  | 'deleteContactMetadata'
  | 'deleteManyContactMetadatas'
  | 'createLocation'
  | 'updateLocation'
  | 'updateManyLocations'
  | 'upsertLocation'
  | 'deleteLocation'
  | 'deleteManyLocations'
  | 'createLocationMetadata'
  | 'updateLocationMetadata'
  | 'updateManyLocationMetadatas'
  | 'upsertLocationMetadata'
  | 'deleteLocationMetadata'
  | 'deleteManyLocationMetadatas'
  | 'createGeometry'
  | 'updateGeometry'
  | 'updateManyGeometries'
  | 'upsertGeometry'
  | 'deleteGeometry'
  | 'deleteManyGeometries'
  | 'createGovernmentFacility'
  | 'updateGovernmentFacility'
  | 'updateManyGovernmentFacilities'
  | 'upsertGovernmentFacility'
  | 'deleteGovernmentFacility'
  | 'deleteManyGovernmentFacilities'
  | 'createFacilityMetadata'
  | 'updateFacilityMetadata'
  | 'updateManyFacilityMetadatas'
  | 'upsertFacilityMetadata'
  | 'deleteFacilityMetadata'
  | 'deleteManyFacilityMetadatas'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createUserProfile'
  | 'updateUserProfile'
  | 'updateManyUserProfiles'
  | 'upsertUserProfile'
  | 'deleteUserProfile'
  | 'deleteManyUserProfiles'
  | 'createGovernmentBody'
  | 'updateGovernmentBody'
  | 'updateManyGovernmentBodies'
  | 'upsertGovernmentBody'
  | 'deleteGovernmentBody'
  | 'deleteManyGovernmentBodies'
  | 'createGovernmentActor'
  | 'updateGovernmentActor'
  | 'upsertGovernmentActor'
  | 'deleteGovernmentActor'
  | 'deleteManyGovernmentActors'
  | 'createGovernmentActorProfile'
  | 'updateGovernmentActorProfile'
  | 'updateManyGovernmentActorProfiles'
  | 'upsertGovernmentActorProfile'
  | 'deleteGovernmentActorProfile'
  | 'deleteManyGovernmentActorProfiles'
  | 'createGovernmentBodyMetadata'
  | 'updateGovernmentBodyMetadata'
  | 'updateManyGovernmentBodyMetadatas'
  | 'upsertGovernmentBodyMetadata'
  | 'deleteGovernmentBodyMetadata'
  | 'deleteManyGovernmentBodyMetadatas'
  | 'createAffiliation'
  | 'updateAffiliation'
  | 'updateManyAffiliations'
  | 'upsertAffiliation'
  | 'deleteAffiliation'
  | 'deleteManyAffiliations'
  | 'createAffiliationRole'
  | 'updateAffiliationRole'
  | 'updateManyAffiliationRoles'
  | 'upsertAffiliationRole'
  | 'deleteAffiliationRole'
  | 'deleteManyAffiliationRoles'


type MutationCreateEmailAddressArgs =
  | 'data'
type MutationUpdateEmailAddressArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEmailAddressesArgs =
  | 'data'
  | 'where'
type MutationUpsertEmailAddressArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEmailAddressArgs =
  | 'where'
type MutationDeleteManyEmailAddressesArgs =
  | 'where'
type MutationCreatePhoneNumberArgs =
  | 'data'
type MutationUpdatePhoneNumberArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPhoneNumbersArgs =
  | 'data'
  | 'where'
type MutationUpsertPhoneNumberArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePhoneNumberArgs =
  | 'where'
type MutationDeleteManyPhoneNumbersArgs =
  | 'where'
type MutationCreateExternalLinkArgs =
  | 'data'
type MutationUpdateExternalLinkArgs =
  | 'data'
  | 'where'
type MutationUpdateManyExternalLinksArgs =
  | 'data'
  | 'where'
type MutationUpsertExternalLinkArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteExternalLinkArgs =
  | 'where'
type MutationDeleteManyExternalLinksArgs =
  | 'where'
type MutationCreateContactMetadataArgs =
  | 'data'
type MutationUpdateContactMetadataArgs =
  | 'data'
  | 'where'
type MutationUpdateManyContactMetadatasArgs =
  | 'data'
  | 'where'
type MutationUpsertContactMetadataArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteContactMetadataArgs =
  | 'where'
type MutationDeleteManyContactMetadatasArgs =
  | 'where'
type MutationCreateLocationArgs =
  | 'data'
type MutationUpdateLocationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLocationsArgs =
  | 'data'
  | 'where'
type MutationUpsertLocationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLocationArgs =
  | 'where'
type MutationDeleteManyLocationsArgs =
  | 'where'
type MutationCreateLocationMetadataArgs =
  | 'data'
type MutationUpdateLocationMetadataArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLocationMetadatasArgs =
  | 'data'
  | 'where'
type MutationUpsertLocationMetadataArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLocationMetadataArgs =
  | 'where'
type MutationDeleteManyLocationMetadatasArgs =
  | 'where'
type MutationCreateGeometryArgs =
  | 'data'
type MutationUpdateGeometryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGeometriesArgs =
  | 'data'
  | 'where'
type MutationUpsertGeometryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGeometryArgs =
  | 'where'
type MutationDeleteManyGeometriesArgs =
  | 'where'
type MutationCreateGovernmentFacilityArgs =
  | 'data'
type MutationUpdateGovernmentFacilityArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGovernmentFacilitiesArgs =
  | 'data'
  | 'where'
type MutationUpsertGovernmentFacilityArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGovernmentFacilityArgs =
  | 'where'
type MutationDeleteManyGovernmentFacilitiesArgs =
  | 'where'
type MutationCreateFacilityMetadataArgs =
  | 'data'
type MutationUpdateFacilityMetadataArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFacilityMetadatasArgs =
  | 'data'
  | 'where'
type MutationUpsertFacilityMetadataArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFacilityMetadataArgs =
  | 'where'
type MutationDeleteManyFacilityMetadatasArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateUserProfileArgs =
  | 'data'
type MutationUpdateUserProfileArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUserProfilesArgs =
  | 'data'
  | 'where'
type MutationUpsertUserProfileArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserProfileArgs =
  | 'where'
type MutationDeleteManyUserProfilesArgs =
  | 'where'
type MutationCreateGovernmentBodyArgs =
  | 'data'
type MutationUpdateGovernmentBodyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGovernmentBodiesArgs =
  | 'data'
  | 'where'
type MutationUpsertGovernmentBodyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGovernmentBodyArgs =
  | 'where'
type MutationDeleteManyGovernmentBodiesArgs =
  | 'where'
type MutationCreateGovernmentActorArgs =
  | 'data'
type MutationUpdateGovernmentActorArgs =
  | 'data'
  | 'where'
type MutationUpsertGovernmentActorArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGovernmentActorArgs =
  | 'where'
type MutationDeleteManyGovernmentActorsArgs =
  | 'where'
type MutationCreateGovernmentActorProfileArgs =
  | 'data'
type MutationUpdateGovernmentActorProfileArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGovernmentActorProfilesArgs =
  | 'data'
  | 'where'
type MutationUpsertGovernmentActorProfileArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGovernmentActorProfileArgs =
  | 'where'
type MutationDeleteManyGovernmentActorProfilesArgs =
  | 'where'
type MutationCreateGovernmentBodyMetadataArgs =
  | 'data'
type MutationUpdateGovernmentBodyMetadataArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGovernmentBodyMetadatasArgs =
  | 'data'
  | 'where'
type MutationUpsertGovernmentBodyMetadataArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGovernmentBodyMetadataArgs =
  | 'where'
type MutationDeleteManyGovernmentBodyMetadatasArgs =
  | 'where'
type MutationCreateAffiliationArgs =
  | 'data'
type MutationUpdateAffiliationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAffiliationsArgs =
  | 'data'
  | 'where'
type MutationUpsertAffiliationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAffiliationArgs =
  | 'where'
type MutationDeleteManyAffiliationsArgs =
  | 'where'
type MutationCreateAffiliationRoleArgs =
  | 'data'
type MutationUpdateAffiliationRoleArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAffiliationRolesArgs =
  | 'data'
  | 'where'
type MutationUpsertAffiliationRoleArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAffiliationRoleArgs =
  | 'where'
type MutationDeleteManyAffiliationRolesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createEmailAddress: {
    type: 'EmailAddress'
    args: Record<MutationCreateEmailAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmailAddressCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress> | prisma.EmailAddress
  }
  updateEmailAddress: {
    type: 'EmailAddress'
    args: Record<MutationUpdateEmailAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmailAddressUpdateInput, where: EmailAddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress | null> | prisma.EmailAddress | null
  }
  updateManyEmailAddresses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEmailAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmailAddressUpdateManyMutationInput, where?: EmailAddressWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEmailAddress: {
    type: 'EmailAddress'
    args: Record<MutationUpsertEmailAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmailAddressWhereUniqueInput, create: EmailAddressCreateInput, update: EmailAddressUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress> | prisma.EmailAddress
  }
  deleteEmailAddress: {
    type: 'EmailAddress'
    args: Record<MutationDeleteEmailAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmailAddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress | null> | prisma.EmailAddress | null
  }
  deleteManyEmailAddresses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEmailAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EmailAddressWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPhoneNumber: {
    type: 'PhoneNumber'
    args: Record<MutationCreatePhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PhoneNumberCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber> | prisma.PhoneNumber
  }
  updatePhoneNumber: {
    type: 'PhoneNumber'
    args: Record<MutationUpdatePhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PhoneNumberUpdateInput, where: PhoneNumberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber | null> | prisma.PhoneNumber | null
  }
  updateManyPhoneNumbers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPhoneNumbersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PhoneNumberUpdateManyMutationInput, where?: PhoneNumberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPhoneNumber: {
    type: 'PhoneNumber'
    args: Record<MutationUpsertPhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PhoneNumberWhereUniqueInput, create: PhoneNumberCreateInput, update: PhoneNumberUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber> | prisma.PhoneNumber
  }
  deletePhoneNumber: {
    type: 'PhoneNumber'
    args: Record<MutationDeletePhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PhoneNumberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber | null> | prisma.PhoneNumber | null
  }
  deleteManyPhoneNumbers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPhoneNumbersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PhoneNumberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createExternalLink: {
    type: 'ExternalLink'
    args: Record<MutationCreateExternalLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ExternalLinkCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLink> | prisma.ExternalLink
  }
  updateExternalLink: {
    type: 'ExternalLink'
    args: Record<MutationUpdateExternalLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ExternalLinkUpdateInput, where: ExternalLinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLink | null> | prisma.ExternalLink | null
  }
  updateManyExternalLinks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyExternalLinksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ExternalLinkUpdateManyMutationInput, where?: ExternalLinkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertExternalLink: {
    type: 'ExternalLink'
    args: Record<MutationUpsertExternalLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ExternalLinkWhereUniqueInput, create: ExternalLinkCreateInput, update: ExternalLinkUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLink> | prisma.ExternalLink
  }
  deleteExternalLink: {
    type: 'ExternalLink'
    args: Record<MutationDeleteExternalLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ExternalLinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLink | null> | prisma.ExternalLink | null
  }
  deleteManyExternalLinks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyExternalLinksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ExternalLinkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createContactMetadata: {
    type: 'ContactMetadata'
    args: Record<MutationCreateContactMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactMetadataCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata> | prisma.ContactMetadata
  }
  updateContactMetadata: {
    type: 'ContactMetadata'
    args: Record<MutationUpdateContactMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactMetadataUpdateInput, where: ContactMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata | null> | prisma.ContactMetadata | null
  }
  updateManyContactMetadatas: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyContactMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactMetadataUpdateManyMutationInput, where?: ContactMetadataWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertContactMetadata: {
    type: 'ContactMetadata'
    args: Record<MutationUpsertContactMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ContactMetadataWhereUniqueInput, create: ContactMetadataCreateInput, update: ContactMetadataUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata> | prisma.ContactMetadata
  }
  deleteContactMetadata: {
    type: 'ContactMetadata'
    args: Record<MutationDeleteContactMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ContactMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata | null> | prisma.ContactMetadata | null
  }
  deleteManyContactMetadatas: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyContactMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ContactMetadataWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createLocation: {
    type: 'Location'
    args: Record<MutationCreateLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LocationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location> | prisma.Location
  }
  updateLocation: {
    type: 'Location'
    args: Record<MutationUpdateLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LocationUpdateInput, where: LocationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location | null> | prisma.Location | null
  }
  updateManyLocations: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLocationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LocationUpdateManyMutationInput, where?: LocationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLocation: {
    type: 'Location'
    args: Record<MutationUpsertLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LocationWhereUniqueInput, create: LocationCreateInput, update: LocationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location> | prisma.Location
  }
  deleteLocation: {
    type: 'Location'
    args: Record<MutationDeleteLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LocationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location | null> | prisma.Location | null
  }
  deleteManyLocations: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLocationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LocationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createLocationMetadata: {
    type: 'LocationMetadata'
    args: Record<MutationCreateLocationMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LocationMetadataCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadata> | prisma.LocationMetadata
  }
  updateLocationMetadata: {
    type: 'LocationMetadata'
    args: Record<MutationUpdateLocationMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LocationMetadataUpdateInput, where: LocationMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadata | null> | prisma.LocationMetadata | null
  }
  updateManyLocationMetadatas: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLocationMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LocationMetadataUpdateManyMutationInput, where?: LocationMetadataWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLocationMetadata: {
    type: 'LocationMetadata'
    args: Record<MutationUpsertLocationMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LocationMetadataWhereUniqueInput, create: LocationMetadataCreateInput, update: LocationMetadataUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadata> | prisma.LocationMetadata
  }
  deleteLocationMetadata: {
    type: 'LocationMetadata'
    args: Record<MutationDeleteLocationMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LocationMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadata | null> | prisma.LocationMetadata | null
  }
  deleteManyLocationMetadatas: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLocationMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LocationMetadataWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGeometry: {
    type: 'Geometry'
    args: Record<MutationCreateGeometryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GeometryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geometry> | prisma.Geometry
  }
  updateGeometry: {
    type: 'Geometry'
    args: Record<MutationUpdateGeometryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GeometryUpdateInput, where: GeometryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geometry | null> | prisma.Geometry | null
  }
  updateManyGeometries: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGeometriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GeometryUpdateManyMutationInput, where?: GeometryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGeometry: {
    type: 'Geometry'
    args: Record<MutationUpsertGeometryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GeometryWhereUniqueInput, create: GeometryCreateInput, update: GeometryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geometry> | prisma.Geometry
  }
  deleteGeometry: {
    type: 'Geometry'
    args: Record<MutationDeleteGeometryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GeometryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geometry | null> | prisma.Geometry | null
  }
  deleteManyGeometries: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGeometriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GeometryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGovernmentFacility: {
    type: 'GovernmentFacility'
    args: Record<MutationCreateGovernmentFacilityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentFacilityCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacility> | prisma.GovernmentFacility
  }
  updateGovernmentFacility: {
    type: 'GovernmentFacility'
    args: Record<MutationUpdateGovernmentFacilityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentFacilityUpdateInput, where: GovernmentFacilityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacility | null> | prisma.GovernmentFacility | null
  }
  updateManyGovernmentFacilities: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGovernmentFacilitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentFacilityUpdateManyMutationInput, where?: GovernmentFacilityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGovernmentFacility: {
    type: 'GovernmentFacility'
    args: Record<MutationUpsertGovernmentFacilityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GovernmentFacilityWhereUniqueInput, create: GovernmentFacilityCreateInput, update: GovernmentFacilityUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacility> | prisma.GovernmentFacility
  }
  deleteGovernmentFacility: {
    type: 'GovernmentFacility'
    args: Record<MutationDeleteGovernmentFacilityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GovernmentFacilityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacility | null> | prisma.GovernmentFacility | null
  }
  deleteManyGovernmentFacilities: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGovernmentFacilitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GovernmentFacilityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFacilityMetadata: {
    type: 'FacilityMetadata'
    args: Record<MutationCreateFacilityMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FacilityMetadataCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadata> | prisma.FacilityMetadata
  }
  updateFacilityMetadata: {
    type: 'FacilityMetadata'
    args: Record<MutationUpdateFacilityMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FacilityMetadataUpdateInput, where: FacilityMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadata | null> | prisma.FacilityMetadata | null
  }
  updateManyFacilityMetadatas: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFacilityMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FacilityMetadataUpdateManyMutationInput, where?: FacilityMetadataWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFacilityMetadata: {
    type: 'FacilityMetadata'
    args: Record<MutationUpsertFacilityMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FacilityMetadataWhereUniqueInput, create: FacilityMetadataCreateInput, update: FacilityMetadataUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadata> | prisma.FacilityMetadata
  }
  deleteFacilityMetadata: {
    type: 'FacilityMetadata'
    args: Record<MutationDeleteFacilityMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FacilityMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadata | null> | prisma.FacilityMetadata | null
  }
  deleteManyFacilityMetadatas: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFacilityMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FacilityMetadataWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUserProfile: {
    type: 'UserProfile'
    args: Record<MutationCreateUserProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserProfileCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfile> | prisma.UserProfile
  }
  updateUserProfile: {
    type: 'UserProfile'
    args: Record<MutationUpdateUserProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserProfileUpdateInput, where: UserProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfile | null> | prisma.UserProfile | null
  }
  updateManyUserProfiles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUserProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserProfileUpdateManyMutationInput, where?: UserProfileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUserProfile: {
    type: 'UserProfile'
    args: Record<MutationUpsertUserProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserProfileWhereUniqueInput, create: UserProfileCreateInput, update: UserProfileUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfile> | prisma.UserProfile
  }
  deleteUserProfile: {
    type: 'UserProfile'
    args: Record<MutationDeleteUserProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfile | null> | prisma.UserProfile | null
  }
  deleteManyUserProfiles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUserProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserProfileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGovernmentBody: {
    type: 'GovernmentBody'
    args: Record<MutationCreateGovernmentBodyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentBodyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody> | prisma.GovernmentBody
  }
  updateGovernmentBody: {
    type: 'GovernmentBody'
    args: Record<MutationUpdateGovernmentBodyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentBodyUpdateInput, where: GovernmentBodyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody | null> | prisma.GovernmentBody | null
  }
  updateManyGovernmentBodies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGovernmentBodiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentBodyUpdateManyMutationInput, where?: GovernmentBodyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGovernmentBody: {
    type: 'GovernmentBody'
    args: Record<MutationUpsertGovernmentBodyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GovernmentBodyWhereUniqueInput, create: GovernmentBodyCreateInput, update: GovernmentBodyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody> | prisma.GovernmentBody
  }
  deleteGovernmentBody: {
    type: 'GovernmentBody'
    args: Record<MutationDeleteGovernmentBodyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GovernmentBodyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody | null> | prisma.GovernmentBody | null
  }
  deleteManyGovernmentBodies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGovernmentBodiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GovernmentBodyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGovernmentActor: {
    type: 'GovernmentActor'
    args: Record<MutationCreateGovernmentActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentActorCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActor> | prisma.GovernmentActor
  }
  updateGovernmentActor: {
    type: 'GovernmentActor'
    args: Record<MutationUpdateGovernmentActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentActorUpdateInput, where: GovernmentActorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActor | null> | prisma.GovernmentActor | null
  }
  upsertGovernmentActor: {
    type: 'GovernmentActor'
    args: Record<MutationUpsertGovernmentActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GovernmentActorWhereUniqueInput, create: GovernmentActorCreateInput, update: GovernmentActorUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActor> | prisma.GovernmentActor
  }
  deleteGovernmentActor: {
    type: 'GovernmentActor'
    args: Record<MutationDeleteGovernmentActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GovernmentActorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActor | null> | prisma.GovernmentActor | null
  }
  deleteManyGovernmentActors: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGovernmentActorsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GovernmentActorWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGovernmentActorProfile: {
    type: 'GovernmentActorProfile'
    args: Record<MutationCreateGovernmentActorProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentActorProfileCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfile> | prisma.GovernmentActorProfile
  }
  updateGovernmentActorProfile: {
    type: 'GovernmentActorProfile'
    args: Record<MutationUpdateGovernmentActorProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentActorProfileUpdateInput, where: GovernmentActorProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfile | null> | prisma.GovernmentActorProfile | null
  }
  updateManyGovernmentActorProfiles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGovernmentActorProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentActorProfileUpdateManyMutationInput, where?: GovernmentActorProfileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGovernmentActorProfile: {
    type: 'GovernmentActorProfile'
    args: Record<MutationUpsertGovernmentActorProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GovernmentActorProfileWhereUniqueInput, create: GovernmentActorProfileCreateInput, update: GovernmentActorProfileUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfile> | prisma.GovernmentActorProfile
  }
  deleteGovernmentActorProfile: {
    type: 'GovernmentActorProfile'
    args: Record<MutationDeleteGovernmentActorProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GovernmentActorProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfile | null> | prisma.GovernmentActorProfile | null
  }
  deleteManyGovernmentActorProfiles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGovernmentActorProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GovernmentActorProfileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGovernmentBodyMetadata: {
    type: 'GovernmentBodyMetadata'
    args: Record<MutationCreateGovernmentBodyMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentBodyMetadataCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadata> | prisma.GovernmentBodyMetadata
  }
  updateGovernmentBodyMetadata: {
    type: 'GovernmentBodyMetadata'
    args: Record<MutationUpdateGovernmentBodyMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentBodyMetadataUpdateInput, where: GovernmentBodyMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadata | null> | prisma.GovernmentBodyMetadata | null
  }
  updateManyGovernmentBodyMetadatas: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGovernmentBodyMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GovernmentBodyMetadataUpdateManyMutationInput, where?: GovernmentBodyMetadataWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGovernmentBodyMetadata: {
    type: 'GovernmentBodyMetadata'
    args: Record<MutationUpsertGovernmentBodyMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GovernmentBodyMetadataWhereUniqueInput, create: GovernmentBodyMetadataCreateInput, update: GovernmentBodyMetadataUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadata> | prisma.GovernmentBodyMetadata
  }
  deleteGovernmentBodyMetadata: {
    type: 'GovernmentBodyMetadata'
    args: Record<MutationDeleteGovernmentBodyMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GovernmentBodyMetadataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadata | null> | prisma.GovernmentBodyMetadata | null
  }
  deleteManyGovernmentBodyMetadatas: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGovernmentBodyMetadatasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GovernmentBodyMetadataWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAffiliation: {
    type: 'Affiliation'
    args: Record<MutationCreateAffiliationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AffiliationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Affiliation> | prisma.Affiliation
  }
  updateAffiliation: {
    type: 'Affiliation'
    args: Record<MutationUpdateAffiliationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AffiliationUpdateInput, where: AffiliationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Affiliation | null> | prisma.Affiliation | null
  }
  updateManyAffiliations: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAffiliationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AffiliationUpdateManyMutationInput, where?: AffiliationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAffiliation: {
    type: 'Affiliation'
    args: Record<MutationUpsertAffiliationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AffiliationWhereUniqueInput, create: AffiliationCreateInput, update: AffiliationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Affiliation> | prisma.Affiliation
  }
  deleteAffiliation: {
    type: 'Affiliation'
    args: Record<MutationDeleteAffiliationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AffiliationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Affiliation | null> | prisma.Affiliation | null
  }
  deleteManyAffiliations: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAffiliationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AffiliationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAffiliationRole: {
    type: 'AffiliationRole'
    args: Record<MutationCreateAffiliationRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AffiliationRoleCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRole> | prisma.AffiliationRole
  }
  updateAffiliationRole: {
    type: 'AffiliationRole'
    args: Record<MutationUpdateAffiliationRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AffiliationRoleUpdateInput, where: AffiliationRoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRole | null> | prisma.AffiliationRole | null
  }
  updateManyAffiliationRoles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAffiliationRolesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AffiliationRoleUpdateManyMutationInput, where?: AffiliationRoleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAffiliationRole: {
    type: 'AffiliationRole'
    args: Record<MutationUpsertAffiliationRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AffiliationRoleWhereUniqueInput, create: AffiliationRoleCreateInput, update: AffiliationRoleUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRole> | prisma.AffiliationRole
  }
  deleteAffiliationRole: {
    type: 'AffiliationRole'
    args: Record<MutationDeleteAffiliationRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AffiliationRoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRole | null> | prisma.AffiliationRole | null
  }
  deleteManyAffiliationRoles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAffiliationRolesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AffiliationRoleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'emailAddress', args?: SubscriptionEmailAddressArgs[] | false, alias?: string  } 
  | { name: 'phoneNumber', args?: SubscriptionPhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'externalLink', args?: SubscriptionExternalLinkArgs[] | false, alias?: string  } 
  | { name: 'contactMetadata', args?: SubscriptionContactMetadataArgs[] | false, alias?: string  } 
  | { name: 'location', args?: SubscriptionLocationArgs[] | false, alias?: string  } 
  | { name: 'locationMetadata', args?: SubscriptionLocationMetadataArgs[] | false, alias?: string  } 
  | { name: 'geometry', args?: SubscriptionGeometryArgs[] | false, alias?: string  } 
  | { name: 'governmentFacility', args?: SubscriptionGovernmentFacilityArgs[] | false, alias?: string  } 
  | { name: 'facilityMetadata', args?: SubscriptionFacilityMetadataArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'userProfile', args?: SubscriptionUserProfileArgs[] | false, alias?: string  } 
  | { name: 'governmentBody', args?: SubscriptionGovernmentBodyArgs[] | false, alias?: string  } 
  | { name: 'governmentActor', args?: SubscriptionGovernmentActorArgs[] | false, alias?: string  } 
  | { name: 'governmentActorProfile', args?: SubscriptionGovernmentActorProfileArgs[] | false, alias?: string  } 
  | { name: 'governmentBodyMetadata', args?: SubscriptionGovernmentBodyMetadataArgs[] | false, alias?: string  } 
  | { name: 'affiliation', args?: SubscriptionAffiliationArgs[] | false, alias?: string  } 
  | { name: 'affiliationRole', args?: SubscriptionAffiliationRoleArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'emailAddress'
  | 'phoneNumber'
  | 'externalLink'
  | 'contactMetadata'
  | 'location'
  | 'locationMetadata'
  | 'geometry'
  | 'governmentFacility'
  | 'facilityMetadata'
  | 'user'
  | 'userProfile'
  | 'governmentBody'
  | 'governmentActor'
  | 'governmentActorProfile'
  | 'governmentBodyMetadata'
  | 'affiliation'
  | 'affiliationRole'


type SubscriptionEmailAddressArgs =
  | 'where'
type SubscriptionPhoneNumberArgs =
  | 'where'
type SubscriptionExternalLinkArgs =
  | 'where'
type SubscriptionContactMetadataArgs =
  | 'where'
type SubscriptionLocationArgs =
  | 'where'
type SubscriptionLocationMetadataArgs =
  | 'where'
type SubscriptionGeometryArgs =
  | 'where'
type SubscriptionGovernmentFacilityArgs =
  | 'where'
type SubscriptionFacilityMetadataArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
type SubscriptionUserProfileArgs =
  | 'where'
type SubscriptionGovernmentBodyArgs =
  | 'where'
type SubscriptionGovernmentActorArgs =
  | 'where'
type SubscriptionGovernmentActorProfileArgs =
  | 'where'
type SubscriptionGovernmentBodyMetadataArgs =
  | 'where'
type SubscriptionAffiliationArgs =
  | 'where'
type SubscriptionAffiliationRoleArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  emailAddress: {
    type: 'EmailAddressSubscriptionPayload'
    args: Record<SubscriptionEmailAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EmailAddressSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddressSubscriptionPayload | null> | prisma.EmailAddressSubscriptionPayload | null
  }
  phoneNumber: {
    type: 'PhoneNumberSubscriptionPayload'
    args: Record<SubscriptionPhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PhoneNumberSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumberSubscriptionPayload | null> | prisma.PhoneNumberSubscriptionPayload | null
  }
  externalLink: {
    type: 'ExternalLinkSubscriptionPayload'
    args: Record<SubscriptionExternalLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ExternalLinkSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLinkSubscriptionPayload | null> | prisma.ExternalLinkSubscriptionPayload | null
  }
  contactMetadata: {
    type: 'ContactMetadataSubscriptionPayload'
    args: Record<SubscriptionContactMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ContactMetadataSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadataSubscriptionPayload | null> | prisma.ContactMetadataSubscriptionPayload | null
  }
  location: {
    type: 'LocationSubscriptionPayload'
    args: Record<SubscriptionLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LocationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationSubscriptionPayload | null> | prisma.LocationSubscriptionPayload | null
  }
  locationMetadata: {
    type: 'LocationMetadataSubscriptionPayload'
    args: Record<SubscriptionLocationMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LocationMetadataSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadataSubscriptionPayload | null> | prisma.LocationMetadataSubscriptionPayload | null
  }
  geometry: {
    type: 'GeometrySubscriptionPayload'
    args: Record<SubscriptionGeometryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GeometrySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeometrySubscriptionPayload | null> | prisma.GeometrySubscriptionPayload | null
  }
  governmentFacility: {
    type: 'GovernmentFacilitySubscriptionPayload'
    args: Record<SubscriptionGovernmentFacilityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GovernmentFacilitySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacilitySubscriptionPayload | null> | prisma.GovernmentFacilitySubscriptionPayload | null
  }
  facilityMetadata: {
    type: 'FacilityMetadataSubscriptionPayload'
    args: Record<SubscriptionFacilityMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FacilityMetadataSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadataSubscriptionPayload | null> | prisma.FacilityMetadataSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  userProfile: {
    type: 'UserProfileSubscriptionPayload'
    args: Record<SubscriptionUserProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserProfileSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfileSubscriptionPayload | null> | prisma.UserProfileSubscriptionPayload | null
  }
  governmentBody: {
    type: 'GovernmentBodySubscriptionPayload'
    args: Record<SubscriptionGovernmentBodyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GovernmentBodySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodySubscriptionPayload | null> | prisma.GovernmentBodySubscriptionPayload | null
  }
  governmentActor: {
    type: 'GovernmentActorSubscriptionPayload'
    args: Record<SubscriptionGovernmentActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GovernmentActorSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorSubscriptionPayload | null> | prisma.GovernmentActorSubscriptionPayload | null
  }
  governmentActorProfile: {
    type: 'GovernmentActorProfileSubscriptionPayload'
    args: Record<SubscriptionGovernmentActorProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GovernmentActorProfileSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfileSubscriptionPayload | null> | prisma.GovernmentActorProfileSubscriptionPayload | null
  }
  governmentBodyMetadata: {
    type: 'GovernmentBodyMetadataSubscriptionPayload'
    args: Record<SubscriptionGovernmentBodyMetadataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GovernmentBodyMetadataSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadataSubscriptionPayload | null> | prisma.GovernmentBodyMetadataSubscriptionPayload | null
  }
  affiliation: {
    type: 'AffiliationSubscriptionPayload'
    args: Record<SubscriptionAffiliationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AffiliationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationSubscriptionPayload | null> | prisma.AffiliationSubscriptionPayload | null
  }
  affiliationRole: {
    type: 'AffiliationRoleSubscriptionPayload'
    args: Record<SubscriptionAffiliationRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AffiliationRoleSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRoleSubscriptionPayload | null> | prisma.AffiliationRoleSubscriptionPayload | null
  }
}
  

// Types for EmailAddressSubscriptionPayload

type EmailAddressSubscriptionPayloadObject =
  | EmailAddressSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EmailAddressSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EmailAddressSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmailAddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'EmailAddress'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmailAddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddress | null> | prisma.EmailAddress | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EmailAddressPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmailAddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailAddressPreviousValues | null> | prisma.EmailAddressPreviousValues | null
  }
}
  

// Types for EmailAddressPreviousValues

type EmailAddressPreviousValuesObject =
  | EmailAddressPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'payload', args?: [] | false, alias?: string  } 

type EmailAddressPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'payload'



  

export interface EmailAddressPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  payload: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PhoneNumberSubscriptionPayload

type PhoneNumberSubscriptionPayloadObject =
  | PhoneNumberSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PhoneNumberSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PhoneNumberSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PhoneNumber'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PhoneNumberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber | null> | prisma.PhoneNumber | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PhoneNumberPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PhoneNumberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumberPreviousValues | null> | prisma.PhoneNumberPreviousValues | null
  }
}
  

// Types for PhoneNumberPreviousValues

type PhoneNumberPreviousValuesObject =
  | PhoneNumberPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'payload', args?: [] | false, alias?: string  } 

type PhoneNumberPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'payload'



  

export interface PhoneNumberPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  payload: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ExternalLinkSubscriptionPayload

type ExternalLinkSubscriptionPayloadObject =
  | ExternalLinkSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ExternalLinkSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ExternalLinkSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ExternalLinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ExternalLink'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ExternalLinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLink | null> | prisma.ExternalLink | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ExternalLinkPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ExternalLinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ExternalLinkPreviousValues | null> | prisma.ExternalLinkPreviousValues | null
  }
}
  

// Types for ExternalLinkPreviousValues

type ExternalLinkPreviousValuesObject =
  | ExternalLinkPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'payload', args?: [] | false, alias?: string  } 

type ExternalLinkPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'payload'



  

export interface ExternalLinkPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  payload: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ContactMetadataSubscriptionPayload

type ContactMetadataSubscriptionPayloadObject =
  | ContactMetadataSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ContactMetadataSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ContactMetadataSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ContactMetadata'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ContactMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadata | null> | prisma.ContactMetadata | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ContactMetadataPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ContactMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactMetadataPreviousValues | null> | prisma.ContactMetadataPreviousValues | null
  }
}
  

// Types for ContactMetadataPreviousValues

type ContactMetadataPreviousValuesObject =
  | ContactMetadataPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'isPrimary', args?: [] | false, alias?: string  } 
  | { name: 'isPublic', args?: [] | false, alias?: string  } 
  | { name: 'isVerified', args?: [] | false, alias?: string  } 

type ContactMetadataPreviousValuesFields =
  | 'id'
  | 'isPrimary'
  | 'isPublic'
  | 'isVerified'



  

export interface ContactMetadataPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPrimary: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isPublic: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isVerified: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for LocationSubscriptionPayload

type LocationSubscriptionPayloadObject =
  | LocationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LocationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LocationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Location'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LocationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location | null> | prisma.Location | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LocationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LocationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationPreviousValues | null> | prisma.LocationPreviousValues | null
  }
}
  

// Types for LocationPreviousValues

type LocationPreviousValuesObject =
  | LocationPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'formatted_address', args?: [] | false, alias?: string  } 
  | { name: 'googleId', args?: [] | false, alias?: string  } 
  | { name: 'placeId', args?: [] | false, alias?: string  } 

type LocationPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'formatted_address'
  | 'googleId'
  | 'placeId'



  

export interface LocationPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  formatted_address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  googleId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  placeId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for LocationMetadataSubscriptionPayload

type LocationMetadataSubscriptionPayloadObject =
  | LocationMetadataSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LocationMetadataSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LocationMetadataSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'LocationMetadata'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LocationMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadata | null> | prisma.LocationMetadata | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LocationMetadataPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LocationMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationMetadataPreviousValues | null> | prisma.LocationMetadataPreviousValues | null
  }
}
  

// Types for LocationMetadataPreviousValues

type LocationMetadataPreviousValuesObject =
  | LocationMetadataPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'isPrimary', args?: [] | false, alias?: string  } 
  | { name: 'isPublic', args?: [] | false, alias?: string  } 
  | { name: 'isVerified', args?: [] | false, alias?: string  } 

type LocationMetadataPreviousValuesFields =
  | 'id'
  | 'isPrimary'
  | 'isPublic'
  | 'isVerified'



  

export interface LocationMetadataPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPrimary: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isPublic: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isVerified: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GeometrySubscriptionPayload

type GeometrySubscriptionPayloadObject =
  | GeometrySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GeometrySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GeometrySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeometrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Geometry'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GeometrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geometry | null> | prisma.Geometry | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GeometryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GeometrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeometryPreviousValues | null> | prisma.GeometryPreviousValues | null
  }
}
  

// Types for GeometryPreviousValues

type GeometryPreviousValuesObject =
  | GeometryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'lat', args?: [] | false, alias?: string  } 
  | { name: 'lng', args?: [] | false, alias?: string  } 

type GeometryPreviousValuesFields =
  | 'id'
  | 'lat'
  | 'lng'



  

export interface GeometryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lat: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lng: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GovernmentFacilitySubscriptionPayload

type GovernmentFacilitySubscriptionPayloadObject =
  | GovernmentFacilitySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GovernmentFacilitySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GovernmentFacilitySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentFacilitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GovernmentFacility'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentFacilitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacility | null> | prisma.GovernmentFacility | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GovernmentFacilityPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentFacilitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacilityPreviousValues | null> | prisma.GovernmentFacilityPreviousValues | null
  }
}
  

// Types for GovernmentFacilityPreviousValues

type GovernmentFacilityPreviousValuesObject =
  | GovernmentFacilityPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type GovernmentFacilityPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'type'



  

export interface GovernmentFacilityPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'GovernmentFacilityType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentFacilityPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentFacilityType> | prisma.GovernmentFacilityType
  }
}
  

// Types for FacilityMetadataSubscriptionPayload

type FacilityMetadataSubscriptionPayloadObject =
  | FacilityMetadataSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FacilityMetadataSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FacilityMetadataSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FacilityMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FacilityMetadata'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FacilityMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadata | null> | prisma.FacilityMetadata | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FacilityMetadataPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FacilityMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacilityMetadataPreviousValues | null> | prisma.FacilityMetadataPreviousValues | null
  }
}
  

// Types for FacilityMetadataPreviousValues

type FacilityMetadataPreviousValuesObject =
  | FacilityMetadataPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'isPrimary', args?: [] | false, alias?: string  } 
  | { name: 'isPublic', args?: [] | false, alias?: string  } 
  | { name: 'isVerified', args?: [] | false, alias?: string  } 

type FacilityMetadataPreviousValuesFields =
  | 'id'
  | 'isPrimary'
  | 'isPublic'
  | 'isVerified'



  

export interface FacilityMetadataPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPrimary: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isPublic: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isVerified: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'cognitoId', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'handle'
  | 'cognitoId'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  cognitoId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserProfileSubscriptionPayload

type UserProfileSubscriptionPayloadObject =
  | UserProfileSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserProfileSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserProfileSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'UserProfile'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfile | null> | prisma.UserProfile | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserProfilePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserProfilePreviousValues | null> | prisma.UserProfilePreviousValues | null
  }
}
  

// Types for UserProfilePreviousValues

type UserProfilePreviousValuesObject =
  | UserProfilePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 

type UserProfilePreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'firstName'
  | 'lastName'
  | 'avatar'
  | 'location'



  

export interface UserProfilePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  avatar: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GovernmentBodySubscriptionPayload

type GovernmentBodySubscriptionPayloadObject =
  | GovernmentBodySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GovernmentBodySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GovernmentBodySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBodySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GovernmentBody'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentBodySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBody | null> | prisma.GovernmentBody | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GovernmentBodyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentBodySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyPreviousValues | null> | prisma.GovernmentBodyPreviousValues | null
  }
}
  

// Types for GovernmentBodyPreviousValues

type GovernmentBodyPreviousValuesObject =
  | GovernmentBodyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'abbr', args?: [] | false, alias?: string  } 

type GovernmentBodyPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'abbr'



  

export interface GovernmentBodyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  abbr: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GovernmentActorSubscriptionPayload

type GovernmentActorSubscriptionPayloadObject =
  | GovernmentActorSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GovernmentActorSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GovernmentActorSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GovernmentActor'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentActorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActor | null> | prisma.GovernmentActor | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GovernmentActorPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentActorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorPreviousValues | null> | prisma.GovernmentActorPreviousValues | null
  }
}
  

// Types for GovernmentActorPreviousValues

type GovernmentActorPreviousValuesObject =
  | GovernmentActorPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type GovernmentActorPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'



  

export interface GovernmentActorPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GovernmentActorProfileSubscriptionPayload

type GovernmentActorProfileSubscriptionPayloadObject =
  | GovernmentActorProfileSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GovernmentActorProfileSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GovernmentActorProfileSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentActorProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GovernmentActorProfile'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentActorProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfile | null> | prisma.GovernmentActorProfile | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GovernmentActorProfilePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentActorProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentActorProfilePreviousValues | null> | prisma.GovernmentActorProfilePreviousValues | null
  }
}
  

// Types for GovernmentActorProfilePreviousValues

type GovernmentActorProfilePreviousValuesObject =
  | GovernmentActorProfilePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 

type GovernmentActorProfilePreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'firstName'
  | 'lastName'



  

export interface GovernmentActorProfilePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GovernmentBodyMetadataSubscriptionPayload

type GovernmentBodyMetadataSubscriptionPayloadObject =
  | GovernmentBodyMetadataSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GovernmentBodyMetadataSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GovernmentBodyMetadataSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GovernmentBodyMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GovernmentBodyMetadata'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentBodyMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadata | null> | prisma.GovernmentBodyMetadata | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GovernmentBodyMetadataPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GovernmentBodyMetadataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GovernmentBodyMetadataPreviousValues | null> | prisma.GovernmentBodyMetadataPreviousValues | null
  }
}
  

// Types for GovernmentBodyMetadataPreviousValues

type GovernmentBodyMetadataPreviousValuesObject =
  | GovernmentBodyMetadataPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'hasChildren', args?: [] | false, alias?: string  } 
  | { name: 'hasParent', args?: [] | false, alias?: string  } 

type GovernmentBodyMetadataPreviousValuesFields =
  | 'id'
  | 'hasChildren'
  | 'hasParent'



  

export interface GovernmentBodyMetadataPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasChildren: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hasParent: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for AffiliationSubscriptionPayload

type AffiliationSubscriptionPayloadObject =
  | AffiliationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AffiliationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AffiliationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Affiliation'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AffiliationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Affiliation | null> | prisma.Affiliation | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AffiliationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AffiliationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationPreviousValues | null> | prisma.AffiliationPreviousValues | null
  }
}
  

// Types for AffiliationPreviousValues

type AffiliationPreviousValuesObject =
  | AffiliationPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'dateStarted', args?: [] | false, alias?: string  } 
  | { name: 'dateEnded', args?: [] | false, alias?: string  } 
  | { name: 'notes', args?: [] | false, alias?: string  } 

type AffiliationPreviousValuesFields =
  | 'id'
  | 'dateStarted'
  | 'dateEnded'
  | 'notes'



  

export interface AffiliationPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  dateStarted: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  dateEnded: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  notes: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for AffiliationRoleSubscriptionPayload

type AffiliationRoleSubscriptionPayloadObject =
  | AffiliationRoleSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AffiliationRoleSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AffiliationRoleSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AffiliationRoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'AffiliationRole'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AffiliationRoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRole | null> | prisma.AffiliationRole | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AffiliationRolePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AffiliationRoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AffiliationRolePreviousValues | null> | prisma.AffiliationRolePreviousValues | null
  }
}
  

// Types for AffiliationRolePreviousValues

type AffiliationRolePreviousValuesObject =
  | AffiliationRolePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'abbr', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type AffiliationRolePreviousValuesFields =
  | 'id'
  | 'abbr'
  | 'name'



  

export interface AffiliationRolePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  abbr: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface EmailAddressWhereUniqueInput {
  id?: string | null
  payload?: string | null
}
export type EmailAddressWhereUniqueInputInputObject =
  | Extract<keyof EmailAddressWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  
export interface EmailAddressWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  payload?: string | null
  payload_not?: string | null
  payload_in?: string[]
  payload_not_in?: string[]
  payload_lt?: string | null
  payload_lte?: string | null
  payload_gt?: string | null
  payload_gte?: string | null
  payload_contains?: string | null
  payload_not_contains?: string | null
  payload_starts_with?: string | null
  payload_not_starts_with?: string | null
  payload_ends_with?: string | null
  payload_not_ends_with?: string | null
  metadata?: ContactMetadataWhereInput | null
  AND?: EmailAddressWhereInput[]
  OR?: EmailAddressWhereInput[]
  NOT?: EmailAddressWhereInput[]
}
export type EmailAddressWhereInputInputObject =
  | Extract<keyof EmailAddressWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  | { name: 'payload_not', alias?: string  } 
  | { name: 'payload_in', alias?: string  } 
  | { name: 'payload_not_in', alias?: string  } 
  | { name: 'payload_lt', alias?: string  } 
  | { name: 'payload_lte', alias?: string  } 
  | { name: 'payload_gt', alias?: string  } 
  | { name: 'payload_gte', alias?: string  } 
  | { name: 'payload_contains', alias?: string  } 
  | { name: 'payload_not_contains', alias?: string  } 
  | { name: 'payload_starts_with', alias?: string  } 
  | { name: 'payload_not_starts_with', alias?: string  } 
  | { name: 'payload_ends_with', alias?: string  } 
  | { name: 'payload_not_ends_with', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ContactMetadataWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  isPrimary?: boolean | null
  isPrimary_not?: boolean | null
  isPublic?: boolean | null
  isPublic_not?: boolean | null
  isVerified?: boolean | null
  isVerified_not?: boolean | null
  AND?: ContactMetadataWhereInput[]
  OR?: ContactMetadataWhereInput[]
  NOT?: ContactMetadataWhereInput[]
}
export type ContactMetadataWhereInputInputObject =
  | Extract<keyof ContactMetadataWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPrimary_not', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isPublic_not', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  | { name: 'isVerified_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PhoneNumberWhereUniqueInput {
  id?: string | null
  payload?: string | null
}
export type PhoneNumberWhereUniqueInputInputObject =
  | Extract<keyof PhoneNumberWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  
export interface PhoneNumberWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  payload?: string | null
  payload_not?: string | null
  payload_in?: string[]
  payload_not_in?: string[]
  payload_lt?: string | null
  payload_lte?: string | null
  payload_gt?: string | null
  payload_gte?: string | null
  payload_contains?: string | null
  payload_not_contains?: string | null
  payload_starts_with?: string | null
  payload_not_starts_with?: string | null
  payload_ends_with?: string | null
  payload_not_ends_with?: string | null
  metadata?: ContactMetadataWhereInput | null
  AND?: PhoneNumberWhereInput[]
  OR?: PhoneNumberWhereInput[]
  NOT?: PhoneNumberWhereInput[]
}
export type PhoneNumberWhereInputInputObject =
  | Extract<keyof PhoneNumberWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  | { name: 'payload_not', alias?: string  } 
  | { name: 'payload_in', alias?: string  } 
  | { name: 'payload_not_in', alias?: string  } 
  | { name: 'payload_lt', alias?: string  } 
  | { name: 'payload_lte', alias?: string  } 
  | { name: 'payload_gt', alias?: string  } 
  | { name: 'payload_gte', alias?: string  } 
  | { name: 'payload_contains', alias?: string  } 
  | { name: 'payload_not_contains', alias?: string  } 
  | { name: 'payload_starts_with', alias?: string  } 
  | { name: 'payload_not_starts_with', alias?: string  } 
  | { name: 'payload_ends_with', alias?: string  } 
  | { name: 'payload_not_ends_with', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ExternalLinkWhereUniqueInput {
  id?: string | null
  payload?: string | null
}
export type ExternalLinkWhereUniqueInputInputObject =
  | Extract<keyof ExternalLinkWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  
export interface ExternalLinkWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  payload?: string | null
  payload_not?: string | null
  payload_in?: string[]
  payload_not_in?: string[]
  payload_lt?: string | null
  payload_lte?: string | null
  payload_gt?: string | null
  payload_gte?: string | null
  payload_contains?: string | null
  payload_not_contains?: string | null
  payload_starts_with?: string | null
  payload_not_starts_with?: string | null
  payload_ends_with?: string | null
  payload_not_ends_with?: string | null
  metadata?: ContactMetadataWhereInput | null
  AND?: ExternalLinkWhereInput[]
  OR?: ExternalLinkWhereInput[]
  NOT?: ExternalLinkWhereInput[]
}
export type ExternalLinkWhereInputInputObject =
  | Extract<keyof ExternalLinkWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  | { name: 'payload_not', alias?: string  } 
  | { name: 'payload_in', alias?: string  } 
  | { name: 'payload_not_in', alias?: string  } 
  | { name: 'payload_lt', alias?: string  } 
  | { name: 'payload_lte', alias?: string  } 
  | { name: 'payload_gt', alias?: string  } 
  | { name: 'payload_gte', alias?: string  } 
  | { name: 'payload_contains', alias?: string  } 
  | { name: 'payload_not_contains', alias?: string  } 
  | { name: 'payload_starts_with', alias?: string  } 
  | { name: 'payload_not_starts_with', alias?: string  } 
  | { name: 'payload_ends_with', alias?: string  } 
  | { name: 'payload_not_ends_with', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ContactMetadataWhereUniqueInput {
  id?: string | null
}
export type ContactMetadataWhereUniqueInputInputObject =
  | Extract<keyof ContactMetadataWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface LocationWhereUniqueInput {
  id?: string | null
}
export type LocationWhereUniqueInputInputObject =
  | Extract<keyof LocationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface LocationWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  formatted_address?: string | null
  formatted_address_not?: string | null
  formatted_address_in?: string[]
  formatted_address_not_in?: string[]
  formatted_address_lt?: string | null
  formatted_address_lte?: string | null
  formatted_address_gt?: string | null
  formatted_address_gte?: string | null
  formatted_address_contains?: string | null
  formatted_address_not_contains?: string | null
  formatted_address_starts_with?: string | null
  formatted_address_not_starts_with?: string | null
  formatted_address_ends_with?: string | null
  formatted_address_not_ends_with?: string | null
  googleId?: string | null
  googleId_not?: string | null
  googleId_in?: string[]
  googleId_not_in?: string[]
  googleId_lt?: string | null
  googleId_lte?: string | null
  googleId_gt?: string | null
  googleId_gte?: string | null
  googleId_contains?: string | null
  googleId_not_contains?: string | null
  googleId_starts_with?: string | null
  googleId_not_starts_with?: string | null
  googleId_ends_with?: string | null
  googleId_not_ends_with?: string | null
  placeId?: string | null
  placeId_not?: string | null
  placeId_in?: string[]
  placeId_not_in?: string[]
  placeId_lt?: string | null
  placeId_lte?: string | null
  placeId_gt?: string | null
  placeId_gte?: string | null
  placeId_contains?: string | null
  placeId_not_contains?: string | null
  placeId_starts_with?: string | null
  placeId_not_starts_with?: string | null
  placeId_ends_with?: string | null
  placeId_not_ends_with?: string | null
  location?: GeometryWhereInput | null
  metadata?: LocationMetadataWhereInput | null
  AND?: LocationWhereInput[]
  OR?: LocationWhereInput[]
  NOT?: LocationWhereInput[]
}
export type LocationWhereInputInputObject =
  | Extract<keyof LocationWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'formatted_address', alias?: string  } 
  | { name: 'formatted_address_not', alias?: string  } 
  | { name: 'formatted_address_in', alias?: string  } 
  | { name: 'formatted_address_not_in', alias?: string  } 
  | { name: 'formatted_address_lt', alias?: string  } 
  | { name: 'formatted_address_lte', alias?: string  } 
  | { name: 'formatted_address_gt', alias?: string  } 
  | { name: 'formatted_address_gte', alias?: string  } 
  | { name: 'formatted_address_contains', alias?: string  } 
  | { name: 'formatted_address_not_contains', alias?: string  } 
  | { name: 'formatted_address_starts_with', alias?: string  } 
  | { name: 'formatted_address_not_starts_with', alias?: string  } 
  | { name: 'formatted_address_ends_with', alias?: string  } 
  | { name: 'formatted_address_not_ends_with', alias?: string  } 
  | { name: 'googleId', alias?: string  } 
  | { name: 'googleId_not', alias?: string  } 
  | { name: 'googleId_in', alias?: string  } 
  | { name: 'googleId_not_in', alias?: string  } 
  | { name: 'googleId_lt', alias?: string  } 
  | { name: 'googleId_lte', alias?: string  } 
  | { name: 'googleId_gt', alias?: string  } 
  | { name: 'googleId_gte', alias?: string  } 
  | { name: 'googleId_contains', alias?: string  } 
  | { name: 'googleId_not_contains', alias?: string  } 
  | { name: 'googleId_starts_with', alias?: string  } 
  | { name: 'googleId_not_starts_with', alias?: string  } 
  | { name: 'googleId_ends_with', alias?: string  } 
  | { name: 'googleId_not_ends_with', alias?: string  } 
  | { name: 'placeId', alias?: string  } 
  | { name: 'placeId_not', alias?: string  } 
  | { name: 'placeId_in', alias?: string  } 
  | { name: 'placeId_not_in', alias?: string  } 
  | { name: 'placeId_lt', alias?: string  } 
  | { name: 'placeId_lte', alias?: string  } 
  | { name: 'placeId_gt', alias?: string  } 
  | { name: 'placeId_gte', alias?: string  } 
  | { name: 'placeId_contains', alias?: string  } 
  | { name: 'placeId_not_contains', alias?: string  } 
  | { name: 'placeId_starts_with', alias?: string  } 
  | { name: 'placeId_not_starts_with', alias?: string  } 
  | { name: 'placeId_ends_with', alias?: string  } 
  | { name: 'placeId_not_ends_with', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GeometryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  lat?: number | null
  lat_not?: number | null
  lat_in?: number[]
  lat_not_in?: number[]
  lat_lt?: number | null
  lat_lte?: number | null
  lat_gt?: number | null
  lat_gte?: number | null
  lng?: number | null
  lng_not?: number | null
  lng_in?: number[]
  lng_not_in?: number[]
  lng_lt?: number | null
  lng_lte?: number | null
  lng_gt?: number | null
  lng_gte?: number | null
  AND?: GeometryWhereInput[]
  OR?: GeometryWhereInput[]
  NOT?: GeometryWhereInput[]
}
export type GeometryWhereInputInputObject =
  | Extract<keyof GeometryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'lat', alias?: string  } 
  | { name: 'lat_not', alias?: string  } 
  | { name: 'lat_in', alias?: string  } 
  | { name: 'lat_not_in', alias?: string  } 
  | { name: 'lat_lt', alias?: string  } 
  | { name: 'lat_lte', alias?: string  } 
  | { name: 'lat_gt', alias?: string  } 
  | { name: 'lat_gte', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  | { name: 'lng_not', alias?: string  } 
  | { name: 'lng_in', alias?: string  } 
  | { name: 'lng_not_in', alias?: string  } 
  | { name: 'lng_lt', alias?: string  } 
  | { name: 'lng_lte', alias?: string  } 
  | { name: 'lng_gt', alias?: string  } 
  | { name: 'lng_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LocationMetadataWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  isPrimary?: boolean | null
  isPrimary_not?: boolean | null
  isPublic?: boolean | null
  isPublic_not?: boolean | null
  isVerified?: boolean | null
  isVerified_not?: boolean | null
  AND?: LocationMetadataWhereInput[]
  OR?: LocationMetadataWhereInput[]
  NOT?: LocationMetadataWhereInput[]
}
export type LocationMetadataWhereInputInputObject =
  | Extract<keyof LocationMetadataWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPrimary_not', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isPublic_not', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  | { name: 'isVerified_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LocationMetadataWhereUniqueInput {
  id?: string | null
}
export type LocationMetadataWhereUniqueInputInputObject =
  | Extract<keyof LocationMetadataWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GeometryWhereUniqueInput {
  id?: string | null
}
export type GeometryWhereUniqueInputInputObject =
  | Extract<keyof GeometryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GovernmentFacilityWhereUniqueInput {
  id?: string | null
}
export type GovernmentFacilityWhereUniqueInputInputObject =
  | Extract<keyof GovernmentFacilityWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GovernmentActorWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  profile?: GovernmentActorProfileWhereInput | null
  affiliations_every?: AffiliationWhereInput | null
  affiliations_some?: AffiliationWhereInput | null
  affiliations_none?: AffiliationWhereInput | null
  AND?: GovernmentActorWhereInput[]
  OR?: GovernmentActorWhereInput[]
  NOT?: GovernmentActorWhereInput[]
}
export type GovernmentActorWhereInputInputObject =
  | Extract<keyof GovernmentActorWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'affiliations_every', alias?: string  } 
  | { name: 'affiliations_some', alias?: string  } 
  | { name: 'affiliations_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentActorProfileWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  email_every?: EmailAddressWhereInput | null
  email_some?: EmailAddressWhereInput | null
  email_none?: EmailAddressWhereInput | null
  phone_number_every?: PhoneNumberWhereInput | null
  phone_number_some?: PhoneNumberWhereInput | null
  phone_number_none?: PhoneNumberWhereInput | null
  AND?: GovernmentActorProfileWhereInput[]
  OR?: GovernmentActorProfileWhereInput[]
  NOT?: GovernmentActorProfileWhereInput[]
}
export type GovernmentActorProfileWhereInputInputObject =
  | Extract<keyof GovernmentActorProfileWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'email_every', alias?: string  } 
  | { name: 'email_some', alias?: string  } 
  | { name: 'email_none', alias?: string  } 
  | { name: 'phone_number_every', alias?: string  } 
  | { name: 'phone_number_some', alias?: string  } 
  | { name: 'phone_number_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AffiliationWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  actor?: GovernmentActorWhereInput | null
  body?: GovernmentBodyWhereInput | null
  dateStarted?: string | null
  dateStarted_not?: string | null
  dateStarted_in?: string[]
  dateStarted_not_in?: string[]
  dateStarted_lt?: string | null
  dateStarted_lte?: string | null
  dateStarted_gt?: string | null
  dateStarted_gte?: string | null
  dateEnded?: string | null
  dateEnded_not?: string | null
  dateEnded_in?: string[]
  dateEnded_not_in?: string[]
  dateEnded_lt?: string | null
  dateEnded_lte?: string | null
  dateEnded_gt?: string | null
  dateEnded_gte?: string | null
  role?: AffiliationRoleWhereInput | null
  AND?: AffiliationWhereInput[]
  OR?: AffiliationWhereInput[]
  NOT?: AffiliationWhereInput[]
}
export type AffiliationWhereInputInputObject =
  | Extract<keyof AffiliationWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'actor', alias?: string  } 
  | { name: 'body', alias?: string  } 
  | { name: 'dateStarted', alias?: string  } 
  | { name: 'dateStarted_not', alias?: string  } 
  | { name: 'dateStarted_in', alias?: string  } 
  | { name: 'dateStarted_not_in', alias?: string  } 
  | { name: 'dateStarted_lt', alias?: string  } 
  | { name: 'dateStarted_lte', alias?: string  } 
  | { name: 'dateStarted_gt', alias?: string  } 
  | { name: 'dateStarted_gte', alias?: string  } 
  | { name: 'dateEnded', alias?: string  } 
  | { name: 'dateEnded_not', alias?: string  } 
  | { name: 'dateEnded_in', alias?: string  } 
  | { name: 'dateEnded_not_in', alias?: string  } 
  | { name: 'dateEnded_lt', alias?: string  } 
  | { name: 'dateEnded_lte', alias?: string  } 
  | { name: 'dateEnded_gt', alias?: string  } 
  | { name: 'dateEnded_gte', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentBodyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  facilities_every?: GovernmentFacilityWhereInput | null
  facilities_some?: GovernmentFacilityWhereInput | null
  facilities_none?: GovernmentFacilityWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  abbr?: string | null
  abbr_not?: string | null
  abbr_in?: string[]
  abbr_not_in?: string[]
  abbr_lt?: string | null
  abbr_lte?: string | null
  abbr_gt?: string | null
  abbr_gte?: string | null
  abbr_contains?: string | null
  abbr_not_contains?: string | null
  abbr_starts_with?: string | null
  abbr_not_starts_with?: string | null
  abbr_ends_with?: string | null
  abbr_not_ends_with?: string | null
  parent?: GovernmentBodyWhereInput | null
  children_every?: GovernmentBodyWhereInput | null
  children_some?: GovernmentBodyWhereInput | null
  children_none?: GovernmentBodyWhereInput | null
  metadata?: GovernmentBodyMetadataWhereInput | null
  AND?: GovernmentBodyWhereInput[]
  OR?: GovernmentBodyWhereInput[]
  NOT?: GovernmentBodyWhereInput[]
}
export type GovernmentBodyWhereInputInputObject =
  | Extract<keyof GovernmentBodyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'facilities_every', alias?: string  } 
  | { name: 'facilities_some', alias?: string  } 
  | { name: 'facilities_none', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'abbr_not', alias?: string  } 
  | { name: 'abbr_in', alias?: string  } 
  | { name: 'abbr_not_in', alias?: string  } 
  | { name: 'abbr_lt', alias?: string  } 
  | { name: 'abbr_lte', alias?: string  } 
  | { name: 'abbr_gt', alias?: string  } 
  | { name: 'abbr_gte', alias?: string  } 
  | { name: 'abbr_contains', alias?: string  } 
  | { name: 'abbr_not_contains', alias?: string  } 
  | { name: 'abbr_starts_with', alias?: string  } 
  | { name: 'abbr_not_starts_with', alias?: string  } 
  | { name: 'abbr_ends_with', alias?: string  } 
  | { name: 'abbr_not_ends_with', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children_every', alias?: string  } 
  | { name: 'children_some', alias?: string  } 
  | { name: 'children_none', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentFacilityWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  type?: prisma.GovernmentFacilityType | null
  type_not?: prisma.GovernmentFacilityType | null
  type_in?: prisma.GovernmentFacilityType[]
  type_not_in?: prisma.GovernmentFacilityType[]
  location?: LocationWhereInput | null
  actors_every?: GovernmentActorWhereInput | null
  actors_some?: GovernmentActorWhereInput | null
  actors_none?: GovernmentActorWhereInput | null
  phone?: PhoneNumberWhereInput | null
  fax?: PhoneNumberWhereInput | null
  email?: EmailAddressWhereInput | null
  url?: ExternalLinkWhereInput | null
  metadata?: FacilityMetadataWhereInput | null
  AND?: GovernmentFacilityWhereInput[]
  OR?: GovernmentFacilityWhereInput[]
  NOT?: GovernmentFacilityWhereInput[]
}
export type GovernmentFacilityWhereInputInputObject =
  | Extract<keyof GovernmentFacilityWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'actors_every', alias?: string  } 
  | { name: 'actors_some', alias?: string  } 
  | { name: 'actors_none', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'fax', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FacilityMetadataWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  isPrimary?: boolean | null
  isPrimary_not?: boolean | null
  isPublic?: boolean | null
  isPublic_not?: boolean | null
  isVerified?: boolean | null
  isVerified_not?: boolean | null
  AND?: FacilityMetadataWhereInput[]
  OR?: FacilityMetadataWhereInput[]
  NOT?: FacilityMetadataWhereInput[]
}
export type FacilityMetadataWhereInputInputObject =
  | Extract<keyof FacilityMetadataWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPrimary_not', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isPublic_not', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  | { name: 'isVerified_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentBodyMetadataWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  hasChildren?: boolean | null
  hasChildren_not?: boolean | null
  hasParent?: boolean | null
  hasParent_not?: boolean | null
  AND?: GovernmentBodyMetadataWhereInput[]
  OR?: GovernmentBodyMetadataWhereInput[]
  NOT?: GovernmentBodyMetadataWhereInput[]
}
export type GovernmentBodyMetadataWhereInputInputObject =
  | Extract<keyof GovernmentBodyMetadataWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'hasChildren', alias?: string  } 
  | { name: 'hasChildren_not', alias?: string  } 
  | { name: 'hasParent', alias?: string  } 
  | { name: 'hasParent_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AffiliationRoleWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  body?: GovernmentBodyWhereInput | null
  abbr?: string | null
  abbr_not?: string | null
  abbr_in?: string[]
  abbr_not_in?: string[]
  abbr_lt?: string | null
  abbr_lte?: string | null
  abbr_gt?: string | null
  abbr_gte?: string | null
  abbr_contains?: string | null
  abbr_not_contains?: string | null
  abbr_starts_with?: string | null
  abbr_not_starts_with?: string | null
  abbr_ends_with?: string | null
  abbr_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: AffiliationRoleWhereInput[]
  OR?: AffiliationRoleWhereInput[]
  NOT?: AffiliationRoleWhereInput[]
}
export type AffiliationRoleWhereInputInputObject =
  | Extract<keyof AffiliationRoleWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'body', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'abbr_not', alias?: string  } 
  | { name: 'abbr_in', alias?: string  } 
  | { name: 'abbr_not_in', alias?: string  } 
  | { name: 'abbr_lt', alias?: string  } 
  | { name: 'abbr_lte', alias?: string  } 
  | { name: 'abbr_gt', alias?: string  } 
  | { name: 'abbr_gte', alias?: string  } 
  | { name: 'abbr_contains', alias?: string  } 
  | { name: 'abbr_not_contains', alias?: string  } 
  | { name: 'abbr_starts_with', alias?: string  } 
  | { name: 'abbr_not_starts_with', alias?: string  } 
  | { name: 'abbr_ends_with', alias?: string  } 
  | { name: 'abbr_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FacilityMetadataWhereUniqueInput {
  id?: string | null
}
export type FacilityMetadataWhereUniqueInputInputObject =
  | Extract<keyof FacilityMetadataWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
  handle?: string | null
  cognitoId?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'cognitoId', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  handle?: string | null
  handle_not?: string | null
  handle_in?: string[]
  handle_not_in?: string[]
  handle_lt?: string | null
  handle_lte?: string | null
  handle_gt?: string | null
  handle_gte?: string | null
  handle_contains?: string | null
  handle_not_contains?: string | null
  handle_starts_with?: string | null
  handle_not_starts_with?: string | null
  handle_ends_with?: string | null
  handle_not_ends_with?: string | null
  cognitoId?: string | null
  cognitoId_not?: string | null
  cognitoId_in?: string[]
  cognitoId_not_in?: string[]
  cognitoId_lt?: string | null
  cognitoId_lte?: string | null
  cognitoId_gt?: string | null
  cognitoId_gte?: string | null
  cognitoId_contains?: string | null
  cognitoId_not_contains?: string | null
  cognitoId_starts_with?: string | null
  cognitoId_not_starts_with?: string | null
  cognitoId_ends_with?: string | null
  cognitoId_not_ends_with?: string | null
  profile?: UserProfileWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'handle_not', alias?: string  } 
  | { name: 'handle_in', alias?: string  } 
  | { name: 'handle_not_in', alias?: string  } 
  | { name: 'handle_lt', alias?: string  } 
  | { name: 'handle_lte', alias?: string  } 
  | { name: 'handle_gt', alias?: string  } 
  | { name: 'handle_gte', alias?: string  } 
  | { name: 'handle_contains', alias?: string  } 
  | { name: 'handle_not_contains', alias?: string  } 
  | { name: 'handle_starts_with', alias?: string  } 
  | { name: 'handle_not_starts_with', alias?: string  } 
  | { name: 'handle_ends_with', alias?: string  } 
  | { name: 'handle_not_ends_with', alias?: string  } 
  | { name: 'cognitoId', alias?: string  } 
  | { name: 'cognitoId_not', alias?: string  } 
  | { name: 'cognitoId_in', alias?: string  } 
  | { name: 'cognitoId_not_in', alias?: string  } 
  | { name: 'cognitoId_lt', alias?: string  } 
  | { name: 'cognitoId_lte', alias?: string  } 
  | { name: 'cognitoId_gt', alias?: string  } 
  | { name: 'cognitoId_gte', alias?: string  } 
  | { name: 'cognitoId_contains', alias?: string  } 
  | { name: 'cognitoId_not_contains', alias?: string  } 
  | { name: 'cognitoId_starts_with', alias?: string  } 
  | { name: 'cognitoId_not_starts_with', alias?: string  } 
  | { name: 'cognitoId_ends_with', alias?: string  } 
  | { name: 'cognitoId_not_ends_with', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserProfileWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  user?: UserWhereInput | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  avatar?: string | null
  avatar_not?: string | null
  avatar_in?: string[]
  avatar_not_in?: string[]
  avatar_lt?: string | null
  avatar_lte?: string | null
  avatar_gt?: string | null
  avatar_gte?: string | null
  avatar_contains?: string | null
  avatar_not_contains?: string | null
  avatar_starts_with?: string | null
  avatar_not_starts_with?: string | null
  avatar_ends_with?: string | null
  avatar_not_ends_with?: string | null
  location?: string | null
  location_not?: string | null
  location_in?: string[]
  location_not_in?: string[]
  location_lt?: string | null
  location_lte?: string | null
  location_gt?: string | null
  location_gte?: string | null
  location_contains?: string | null
  location_not_contains?: string | null
  location_starts_with?: string | null
  location_not_starts_with?: string | null
  location_ends_with?: string | null
  location_not_ends_with?: string | null
  email_every?: EmailAddressWhereInput | null
  email_some?: EmailAddressWhereInput | null
  email_none?: EmailAddressWhereInput | null
  phone_number_every?: PhoneNumberWhereInput | null
  phone_number_some?: PhoneNumberWhereInput | null
  phone_number_none?: PhoneNumberWhereInput | null
  AND?: UserProfileWhereInput[]
  OR?: UserProfileWhereInput[]
  NOT?: UserProfileWhereInput[]
}
export type UserProfileWhereInputInputObject =
  | Extract<keyof UserProfileWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'avatar_not', alias?: string  } 
  | { name: 'avatar_in', alias?: string  } 
  | { name: 'avatar_not_in', alias?: string  } 
  | { name: 'avatar_lt', alias?: string  } 
  | { name: 'avatar_lte', alias?: string  } 
  | { name: 'avatar_gt', alias?: string  } 
  | { name: 'avatar_gte', alias?: string  } 
  | { name: 'avatar_contains', alias?: string  } 
  | { name: 'avatar_not_contains', alias?: string  } 
  | { name: 'avatar_starts_with', alias?: string  } 
  | { name: 'avatar_not_starts_with', alias?: string  } 
  | { name: 'avatar_ends_with', alias?: string  } 
  | { name: 'avatar_not_ends_with', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'location_not', alias?: string  } 
  | { name: 'location_in', alias?: string  } 
  | { name: 'location_not_in', alias?: string  } 
  | { name: 'location_lt', alias?: string  } 
  | { name: 'location_lte', alias?: string  } 
  | { name: 'location_gt', alias?: string  } 
  | { name: 'location_gte', alias?: string  } 
  | { name: 'location_contains', alias?: string  } 
  | { name: 'location_not_contains', alias?: string  } 
  | { name: 'location_starts_with', alias?: string  } 
  | { name: 'location_not_starts_with', alias?: string  } 
  | { name: 'location_ends_with', alias?: string  } 
  | { name: 'location_not_ends_with', alias?: string  } 
  | { name: 'email_every', alias?: string  } 
  | { name: 'email_some', alias?: string  } 
  | { name: 'email_none', alias?: string  } 
  | { name: 'phone_number_every', alias?: string  } 
  | { name: 'phone_number_some', alias?: string  } 
  | { name: 'phone_number_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserProfileWhereUniqueInput {
  id?: string | null
}
export type UserProfileWhereUniqueInputInputObject =
  | Extract<keyof UserProfileWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GovernmentBodyWhereUniqueInput {
  id?: string | null
}
export type GovernmentBodyWhereUniqueInputInputObject =
  | Extract<keyof GovernmentBodyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GovernmentActorWhereUniqueInput {
  id?: string | null
}
export type GovernmentActorWhereUniqueInputInputObject =
  | Extract<keyof GovernmentActorWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GovernmentActorProfileWhereUniqueInput {
  id?: string | null
}
export type GovernmentActorProfileWhereUniqueInputInputObject =
  | Extract<keyof GovernmentActorProfileWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GovernmentBodyMetadataWhereUniqueInput {
  id?: string | null
}
export type GovernmentBodyMetadataWhereUniqueInputInputObject =
  | Extract<keyof GovernmentBodyMetadataWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AffiliationWhereUniqueInput {
  id?: string | null
}
export type AffiliationWhereUniqueInputInputObject =
  | Extract<keyof AffiliationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AffiliationRoleWhereUniqueInput {
  id?: string | null
}
export type AffiliationRoleWhereUniqueInputInputObject =
  | Extract<keyof AffiliationRoleWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EmailAddressCreateInput {
  id?: string | null
  payload?: string
  metadata?: ContactMetadataCreateOneInput
}
export type EmailAddressCreateInputInputObject =
  | Extract<keyof EmailAddressCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface ContactMetadataCreateOneInput {
  create?: ContactMetadataCreateInput | null
  connect?: ContactMetadataWhereUniqueInput | null
}
export type ContactMetadataCreateOneInputInputObject =
  | Extract<keyof ContactMetadataCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContactMetadataCreateInput {
  id?: string | null
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type ContactMetadataCreateInputInputObject =
  | Extract<keyof ContactMetadataCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface EmailAddressUpdateInput {
  payload?: string | null
  metadata?: ContactMetadataUpdateOneRequiredInput | null
}
export type EmailAddressUpdateInputInputObject =
  | Extract<keyof EmailAddressUpdateInput, string>
  | { name: 'payload', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface ContactMetadataUpdateOneRequiredInput {
  create?: ContactMetadataCreateInput | null
  update?: ContactMetadataUpdateDataInput | null
  upsert?: ContactMetadataUpsertNestedInput | null
  connect?: ContactMetadataWhereUniqueInput | null
}
export type ContactMetadataUpdateOneRequiredInputInputObject =
  | Extract<keyof ContactMetadataUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContactMetadataUpdateDataInput {
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type ContactMetadataUpdateDataInputInputObject =
  | Extract<keyof ContactMetadataUpdateDataInput, string>
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface ContactMetadataUpsertNestedInput {
  update?: ContactMetadataUpdateDataInput
  create?: ContactMetadataCreateInput
}
export type ContactMetadataUpsertNestedInputInputObject =
  | Extract<keyof ContactMetadataUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EmailAddressUpdateManyMutationInput {
  payload?: string | null
}
export type EmailAddressUpdateManyMutationInputInputObject =
  | Extract<keyof EmailAddressUpdateManyMutationInput, string>
  | { name: 'payload', alias?: string  } 
  
export interface PhoneNumberCreateInput {
  id?: string | null
  payload?: string
  metadata?: ContactMetadataCreateOneInput
}
export type PhoneNumberCreateInputInputObject =
  | Extract<keyof PhoneNumberCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface PhoneNumberUpdateInput {
  payload?: string | null
  metadata?: ContactMetadataUpdateOneRequiredInput | null
}
export type PhoneNumberUpdateInputInputObject =
  | Extract<keyof PhoneNumberUpdateInput, string>
  | { name: 'payload', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface PhoneNumberUpdateManyMutationInput {
  payload?: string | null
}
export type PhoneNumberUpdateManyMutationInputInputObject =
  | Extract<keyof PhoneNumberUpdateManyMutationInput, string>
  | { name: 'payload', alias?: string  } 
  
export interface ExternalLinkCreateInput {
  id?: string | null
  payload?: string
  metadata?: ContactMetadataCreateOneInput
}
export type ExternalLinkCreateInputInputObject =
  | Extract<keyof ExternalLinkCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface ExternalLinkUpdateInput {
  payload?: string | null
  metadata?: ContactMetadataUpdateOneRequiredInput | null
}
export type ExternalLinkUpdateInputInputObject =
  | Extract<keyof ExternalLinkUpdateInput, string>
  | { name: 'payload', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface ExternalLinkUpdateManyMutationInput {
  payload?: string | null
}
export type ExternalLinkUpdateManyMutationInputInputObject =
  | Extract<keyof ExternalLinkUpdateManyMutationInput, string>
  | { name: 'payload', alias?: string  } 
  
export interface ContactMetadataUpdateInput {
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type ContactMetadataUpdateInputInputObject =
  | Extract<keyof ContactMetadataUpdateInput, string>
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface ContactMetadataUpdateManyMutationInput {
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type ContactMetadataUpdateManyMutationInputInputObject =
  | Extract<keyof ContactMetadataUpdateManyMutationInput, string>
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface LocationCreateInput {
  id?: string | null
  formatted_address?: string | null
  googleId?: string | null
  placeId?: string | null
  location?: GeometryCreateOneInput | null
  metadata?: LocationMetadataCreateOneInput
}
export type LocationCreateInputInputObject =
  | Extract<keyof LocationCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'formatted_address', alias?: string  } 
  | { name: 'googleId', alias?: string  } 
  | { name: 'placeId', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface GeometryCreateOneInput {
  create?: GeometryCreateInput | null
  connect?: GeometryWhereUniqueInput | null
}
export type GeometryCreateOneInputInputObject =
  | Extract<keyof GeometryCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GeometryCreateInput {
  id?: string | null
  lat?: number
  lng?: number
}
export type GeometryCreateInputInputObject =
  | Extract<keyof GeometryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  
export interface LocationMetadataCreateOneInput {
  create?: LocationMetadataCreateInput | null
  connect?: LocationMetadataWhereUniqueInput | null
}
export type LocationMetadataCreateOneInputInputObject =
  | Extract<keyof LocationMetadataCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LocationMetadataCreateInput {
  id?: string | null
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type LocationMetadataCreateInputInputObject =
  | Extract<keyof LocationMetadataCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface LocationUpdateInput {
  formatted_address?: string | null
  googleId?: string | null
  placeId?: string | null
  location?: GeometryUpdateOneInput | null
  metadata?: LocationMetadataUpdateOneRequiredInput | null
}
export type LocationUpdateInputInputObject =
  | Extract<keyof LocationUpdateInput, string>
  | { name: 'formatted_address', alias?: string  } 
  | { name: 'googleId', alias?: string  } 
  | { name: 'placeId', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface GeometryUpdateOneInput {
  create?: GeometryCreateInput | null
  update?: GeometryUpdateDataInput | null
  upsert?: GeometryUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: GeometryWhereUniqueInput | null
}
export type GeometryUpdateOneInputInputObject =
  | Extract<keyof GeometryUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GeometryUpdateDataInput {
  lat?: number | null
  lng?: number | null
}
export type GeometryUpdateDataInputInputObject =
  | Extract<keyof GeometryUpdateDataInput, string>
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  
export interface GeometryUpsertNestedInput {
  update?: GeometryUpdateDataInput
  create?: GeometryCreateInput
}
export type GeometryUpsertNestedInputInputObject =
  | Extract<keyof GeometryUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LocationMetadataUpdateOneRequiredInput {
  create?: LocationMetadataCreateInput | null
  update?: LocationMetadataUpdateDataInput | null
  upsert?: LocationMetadataUpsertNestedInput | null
  connect?: LocationMetadataWhereUniqueInput | null
}
export type LocationMetadataUpdateOneRequiredInputInputObject =
  | Extract<keyof LocationMetadataUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LocationMetadataUpdateDataInput {
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type LocationMetadataUpdateDataInputInputObject =
  | Extract<keyof LocationMetadataUpdateDataInput, string>
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface LocationMetadataUpsertNestedInput {
  update?: LocationMetadataUpdateDataInput
  create?: LocationMetadataCreateInput
}
export type LocationMetadataUpsertNestedInputInputObject =
  | Extract<keyof LocationMetadataUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LocationUpdateManyMutationInput {
  formatted_address?: string | null
  googleId?: string | null
  placeId?: string | null
}
export type LocationUpdateManyMutationInputInputObject =
  | Extract<keyof LocationUpdateManyMutationInput, string>
  | { name: 'formatted_address', alias?: string  } 
  | { name: 'googleId', alias?: string  } 
  | { name: 'placeId', alias?: string  } 
  
export interface LocationMetadataUpdateInput {
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type LocationMetadataUpdateInputInputObject =
  | Extract<keyof LocationMetadataUpdateInput, string>
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface LocationMetadataUpdateManyMutationInput {
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type LocationMetadataUpdateManyMutationInputInputObject =
  | Extract<keyof LocationMetadataUpdateManyMutationInput, string>
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface GeometryUpdateInput {
  lat?: number | null
  lng?: number | null
}
export type GeometryUpdateInputInputObject =
  | Extract<keyof GeometryUpdateInput, string>
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  
export interface GeometryUpdateManyMutationInput {
  lat?: number | null
  lng?: number | null
}
export type GeometryUpdateManyMutationInputInputObject =
  | Extract<keyof GeometryUpdateManyMutationInput, string>
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  
export interface GovernmentFacilityCreateInput {
  id?: string | null
  name?: string | null
  type?: prisma.GovernmentFacilityType
  location?: LocationCreateOneInput
  actors?: GovernmentActorCreateManyInput | null
  phone?: PhoneNumberCreateOneInput | null
  fax?: PhoneNumberCreateOneInput | null
  email?: EmailAddressCreateOneInput | null
  url?: ExternalLinkCreateOneInput | null
  metadata?: FacilityMetadataCreateOneInput
}
export type GovernmentFacilityCreateInputInputObject =
  | Extract<keyof GovernmentFacilityCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'actors', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'fax', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface LocationCreateOneInput {
  create?: LocationCreateInput | null
  connect?: LocationWhereUniqueInput | null
}
export type LocationCreateOneInputInputObject =
  | Extract<keyof LocationCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentActorCreateManyInput {
  create?: GovernmentActorCreateInput[]
  connect?: GovernmentActorWhereUniqueInput[]
}
export type GovernmentActorCreateManyInputInputObject =
  | Extract<keyof GovernmentActorCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentActorCreateInput {
  id?: string | null
  profile?: GovernmentActorProfileCreateOneInput
  affiliations?: AffiliationCreateManyWithoutActorInput | null
}
export type GovernmentActorCreateInputInputObject =
  | Extract<keyof GovernmentActorCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'affiliations', alias?: string  } 
  
export interface GovernmentActorProfileCreateOneInput {
  create?: GovernmentActorProfileCreateInput | null
  connect?: GovernmentActorProfileWhereUniqueInput | null
}
export type GovernmentActorProfileCreateOneInputInputObject =
  | Extract<keyof GovernmentActorProfileCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentActorProfileCreateInput {
  id?: string | null
  firstName?: string | null
  lastName?: string | null
  email?: EmailAddressCreateManyInput | null
  phone_number?: PhoneNumberCreateManyInput | null
}
export type GovernmentActorProfileCreateInputInputObject =
  | Extract<keyof GovernmentActorProfileCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone_number', alias?: string  } 
  
export interface EmailAddressCreateManyInput {
  create?: EmailAddressCreateInput[]
  connect?: EmailAddressWhereUniqueInput[]
}
export type EmailAddressCreateManyInputInputObject =
  | Extract<keyof EmailAddressCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PhoneNumberCreateManyInput {
  create?: PhoneNumberCreateInput[]
  connect?: PhoneNumberWhereUniqueInput[]
}
export type PhoneNumberCreateManyInputInputObject =
  | Extract<keyof PhoneNumberCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AffiliationCreateManyWithoutActorInput {
  create?: AffiliationCreateWithoutActorInput[]
  connect?: AffiliationWhereUniqueInput[]
}
export type AffiliationCreateManyWithoutActorInputInputObject =
  | Extract<keyof AffiliationCreateManyWithoutActorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AffiliationCreateWithoutActorInput {
  id?: string | null
  body?: GovernmentBodyCreateOneInput
  dateStarted?: string
  dateEnded?: string | null
  role?: AffiliationRoleCreateOneInput | null
  notes?: undefined | null
}
export type AffiliationCreateWithoutActorInputInputObject =
  | Extract<keyof AffiliationCreateWithoutActorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'body', alias?: string  } 
  | { name: 'dateStarted', alias?: string  } 
  | { name: 'dateEnded', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notes', alias?: string  } 
  
export interface GovernmentBodyCreateOneInput {
  create?: GovernmentBodyCreateInput | null
  connect?: GovernmentBodyWhereUniqueInput | null
}
export type GovernmentBodyCreateOneInputInputObject =
  | Extract<keyof GovernmentBodyCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentBodyCreateInput {
  id?: string | null
  facilities?: GovernmentFacilityCreateManyInput | null
  name?: string
  abbr?: string | null
  parent?: GovernmentBodyCreateOneWithoutParentInput | null
  children?: GovernmentBodyCreateManyWithoutChildrenInput | null
  metadata?: GovernmentBodyMetadataCreateOneInput
}
export type GovernmentBodyCreateInputInputObject =
  | Extract<keyof GovernmentBodyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'facilities', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface GovernmentFacilityCreateManyInput {
  create?: GovernmentFacilityCreateInput[]
  connect?: GovernmentFacilityWhereUniqueInput[]
}
export type GovernmentFacilityCreateManyInputInputObject =
  | Extract<keyof GovernmentFacilityCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentBodyCreateOneWithoutParentInput {
  create?: GovernmentBodyCreateWithoutParentInput | null
  connect?: GovernmentBodyWhereUniqueInput | null
}
export type GovernmentBodyCreateOneWithoutParentInputInputObject =
  | Extract<keyof GovernmentBodyCreateOneWithoutParentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentBodyCreateWithoutParentInput {
  id?: string | null
  facilities?: GovernmentFacilityCreateManyInput | null
  name?: string
  abbr?: string | null
  children?: GovernmentBodyCreateManyWithoutChildrenInput | null
  metadata?: GovernmentBodyMetadataCreateOneInput
}
export type GovernmentBodyCreateWithoutParentInputInputObject =
  | Extract<keyof GovernmentBodyCreateWithoutParentInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'facilities', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'children', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface GovernmentBodyCreateManyWithoutChildrenInput {
  create?: GovernmentBodyCreateWithoutChildrenInput[]
  connect?: GovernmentBodyWhereUniqueInput[]
}
export type GovernmentBodyCreateManyWithoutChildrenInputInputObject =
  | Extract<keyof GovernmentBodyCreateManyWithoutChildrenInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentBodyCreateWithoutChildrenInput {
  id?: string | null
  facilities?: GovernmentFacilityCreateManyInput | null
  name?: string
  abbr?: string | null
  parent?: GovernmentBodyCreateOneWithoutParentInput | null
  metadata?: GovernmentBodyMetadataCreateOneInput
}
export type GovernmentBodyCreateWithoutChildrenInputInputObject =
  | Extract<keyof GovernmentBodyCreateWithoutChildrenInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'facilities', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface GovernmentBodyMetadataCreateOneInput {
  create?: GovernmentBodyMetadataCreateInput | null
  connect?: GovernmentBodyMetadataWhereUniqueInput | null
}
export type GovernmentBodyMetadataCreateOneInputInputObject =
  | Extract<keyof GovernmentBodyMetadataCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentBodyMetadataCreateInput {
  id?: string | null
  hasChildren?: boolean | null
  hasParent?: boolean | null
}
export type GovernmentBodyMetadataCreateInputInputObject =
  | Extract<keyof GovernmentBodyMetadataCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'hasChildren', alias?: string  } 
  | { name: 'hasParent', alias?: string  } 
  
export interface AffiliationRoleCreateOneInput {
  create?: AffiliationRoleCreateInput | null
  connect?: AffiliationRoleWhereUniqueInput | null
}
export type AffiliationRoleCreateOneInputInputObject =
  | Extract<keyof AffiliationRoleCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AffiliationRoleCreateInput {
  id?: string | null
  body?: GovernmentBodyCreateOneInput
  abbr?: string | null
  name?: string
}
export type AffiliationRoleCreateInputInputObject =
  | Extract<keyof AffiliationRoleCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'body', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PhoneNumberCreateOneInput {
  create?: PhoneNumberCreateInput | null
  connect?: PhoneNumberWhereUniqueInput | null
}
export type PhoneNumberCreateOneInputInputObject =
  | Extract<keyof PhoneNumberCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmailAddressCreateOneInput {
  create?: EmailAddressCreateInput | null
  connect?: EmailAddressWhereUniqueInput | null
}
export type EmailAddressCreateOneInputInputObject =
  | Extract<keyof EmailAddressCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ExternalLinkCreateOneInput {
  create?: ExternalLinkCreateInput | null
  connect?: ExternalLinkWhereUniqueInput | null
}
export type ExternalLinkCreateOneInputInputObject =
  | Extract<keyof ExternalLinkCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FacilityMetadataCreateOneInput {
  create?: FacilityMetadataCreateInput | null
  connect?: FacilityMetadataWhereUniqueInput | null
}
export type FacilityMetadataCreateOneInputInputObject =
  | Extract<keyof FacilityMetadataCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FacilityMetadataCreateInput {
  id?: string | null
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type FacilityMetadataCreateInputInputObject =
  | Extract<keyof FacilityMetadataCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface GovernmentFacilityUpdateInput {
  name?: string | null
  type?: prisma.GovernmentFacilityType | null
  location?: LocationUpdateOneRequiredInput | null
  actors?: GovernmentActorUpdateManyInput | null
  phone?: PhoneNumberUpdateOneInput | null
  fax?: PhoneNumberUpdateOneInput | null
  email?: EmailAddressUpdateOneInput | null
  url?: ExternalLinkUpdateOneInput | null
  metadata?: FacilityMetadataUpdateOneRequiredInput | null
}
export type GovernmentFacilityUpdateInputInputObject =
  | Extract<keyof GovernmentFacilityUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'actors', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'fax', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface LocationUpdateOneRequiredInput {
  create?: LocationCreateInput | null
  update?: LocationUpdateDataInput | null
  upsert?: LocationUpsertNestedInput | null
  connect?: LocationWhereUniqueInput | null
}
export type LocationUpdateOneRequiredInputInputObject =
  | Extract<keyof LocationUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LocationUpdateDataInput {
  formatted_address?: string | null
  googleId?: string | null
  placeId?: string | null
  location?: GeometryUpdateOneInput | null
  metadata?: LocationMetadataUpdateOneRequiredInput | null
}
export type LocationUpdateDataInputInputObject =
  | Extract<keyof LocationUpdateDataInput, string>
  | { name: 'formatted_address', alias?: string  } 
  | { name: 'googleId', alias?: string  } 
  | { name: 'placeId', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface LocationUpsertNestedInput {
  update?: LocationUpdateDataInput
  create?: LocationCreateInput
}
export type LocationUpsertNestedInputInputObject =
  | Extract<keyof LocationUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GovernmentActorUpdateManyInput {
  create?: GovernmentActorCreateInput[]
  update?: GovernmentActorUpdateWithWhereUniqueNestedInput[]
  upsert?: GovernmentActorUpsertWithWhereUniqueNestedInput[]
  delete?: GovernmentActorWhereUniqueInput[]
  connect?: GovernmentActorWhereUniqueInput[]
  set?: GovernmentActorWhereUniqueInput[]
  disconnect?: GovernmentActorWhereUniqueInput[]
  deleteMany?: GovernmentActorScalarWhereInput[]
}
export type GovernmentActorUpdateManyInputInputObject =
  | Extract<keyof GovernmentActorUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  
export interface GovernmentActorUpdateWithWhereUniqueNestedInput {
  where?: GovernmentActorWhereUniqueInput
  data?: GovernmentActorUpdateDataInput
}
export type GovernmentActorUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof GovernmentActorUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GovernmentActorUpdateDataInput {
  profile?: GovernmentActorProfileUpdateOneRequiredInput | null
  affiliations?: AffiliationUpdateManyWithoutActorInput | null
}
export type GovernmentActorUpdateDataInputInputObject =
  | Extract<keyof GovernmentActorUpdateDataInput, string>
  | { name: 'profile', alias?: string  } 
  | { name: 'affiliations', alias?: string  } 
  
export interface GovernmentActorProfileUpdateOneRequiredInput {
  create?: GovernmentActorProfileCreateInput | null
  update?: GovernmentActorProfileUpdateDataInput | null
  upsert?: GovernmentActorProfileUpsertNestedInput | null
  connect?: GovernmentActorProfileWhereUniqueInput | null
}
export type GovernmentActorProfileUpdateOneRequiredInputInputObject =
  | Extract<keyof GovernmentActorProfileUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentActorProfileUpdateDataInput {
  firstName?: string | null
  lastName?: string | null
  email?: EmailAddressUpdateManyInput | null
  phone_number?: PhoneNumberUpdateManyInput | null
}
export type GovernmentActorProfileUpdateDataInputInputObject =
  | Extract<keyof GovernmentActorProfileUpdateDataInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone_number', alias?: string  } 
  
export interface EmailAddressUpdateManyInput {
  create?: EmailAddressCreateInput[]
  update?: EmailAddressUpdateWithWhereUniqueNestedInput[]
  upsert?: EmailAddressUpsertWithWhereUniqueNestedInput[]
  delete?: EmailAddressWhereUniqueInput[]
  connect?: EmailAddressWhereUniqueInput[]
  set?: EmailAddressWhereUniqueInput[]
  disconnect?: EmailAddressWhereUniqueInput[]
  deleteMany?: EmailAddressScalarWhereInput[]
  updateMany?: EmailAddressUpdateManyWithWhereNestedInput[]
}
export type EmailAddressUpdateManyInputInputObject =
  | Extract<keyof EmailAddressUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EmailAddressUpdateWithWhereUniqueNestedInput {
  where?: EmailAddressWhereUniqueInput
  data?: EmailAddressUpdateDataInput
}
export type EmailAddressUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof EmailAddressUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EmailAddressUpdateDataInput {
  payload?: string | null
  metadata?: ContactMetadataUpdateOneRequiredInput | null
}
export type EmailAddressUpdateDataInputInputObject =
  | Extract<keyof EmailAddressUpdateDataInput, string>
  | { name: 'payload', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface EmailAddressUpsertWithWhereUniqueNestedInput {
  where?: EmailAddressWhereUniqueInput
  update?: EmailAddressUpdateDataInput
  create?: EmailAddressCreateInput
}
export type EmailAddressUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof EmailAddressUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EmailAddressScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  payload?: string | null
  payload_not?: string | null
  payload_in?: string[]
  payload_not_in?: string[]
  payload_lt?: string | null
  payload_lte?: string | null
  payload_gt?: string | null
  payload_gte?: string | null
  payload_contains?: string | null
  payload_not_contains?: string | null
  payload_starts_with?: string | null
  payload_not_starts_with?: string | null
  payload_ends_with?: string | null
  payload_not_ends_with?: string | null
  AND?: EmailAddressScalarWhereInput[]
  OR?: EmailAddressScalarWhereInput[]
  NOT?: EmailAddressScalarWhereInput[]
}
export type EmailAddressScalarWhereInputInputObject =
  | Extract<keyof EmailAddressScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  | { name: 'payload_not', alias?: string  } 
  | { name: 'payload_in', alias?: string  } 
  | { name: 'payload_not_in', alias?: string  } 
  | { name: 'payload_lt', alias?: string  } 
  | { name: 'payload_lte', alias?: string  } 
  | { name: 'payload_gt', alias?: string  } 
  | { name: 'payload_gte', alias?: string  } 
  | { name: 'payload_contains', alias?: string  } 
  | { name: 'payload_not_contains', alias?: string  } 
  | { name: 'payload_starts_with', alias?: string  } 
  | { name: 'payload_not_starts_with', alias?: string  } 
  | { name: 'payload_ends_with', alias?: string  } 
  | { name: 'payload_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmailAddressUpdateManyWithWhereNestedInput {
  where?: EmailAddressScalarWhereInput
  data?: EmailAddressUpdateManyDataInput
}
export type EmailAddressUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EmailAddressUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EmailAddressUpdateManyDataInput {
  payload?: string | null
}
export type EmailAddressUpdateManyDataInputInputObject =
  | Extract<keyof EmailAddressUpdateManyDataInput, string>
  | { name: 'payload', alias?: string  } 
  
export interface PhoneNumberUpdateManyInput {
  create?: PhoneNumberCreateInput[]
  update?: PhoneNumberUpdateWithWhereUniqueNestedInput[]
  upsert?: PhoneNumberUpsertWithWhereUniqueNestedInput[]
  delete?: PhoneNumberWhereUniqueInput[]
  connect?: PhoneNumberWhereUniqueInput[]
  set?: PhoneNumberWhereUniqueInput[]
  disconnect?: PhoneNumberWhereUniqueInput[]
  deleteMany?: PhoneNumberScalarWhereInput[]
  updateMany?: PhoneNumberUpdateManyWithWhereNestedInput[]
}
export type PhoneNumberUpdateManyInputInputObject =
  | Extract<keyof PhoneNumberUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PhoneNumberUpdateWithWhereUniqueNestedInput {
  where?: PhoneNumberWhereUniqueInput
  data?: PhoneNumberUpdateDataInput
}
export type PhoneNumberUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof PhoneNumberUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PhoneNumberUpdateDataInput {
  payload?: string | null
  metadata?: ContactMetadataUpdateOneRequiredInput | null
}
export type PhoneNumberUpdateDataInputInputObject =
  | Extract<keyof PhoneNumberUpdateDataInput, string>
  | { name: 'payload', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface PhoneNumberUpsertWithWhereUniqueNestedInput {
  where?: PhoneNumberWhereUniqueInput
  update?: PhoneNumberUpdateDataInput
  create?: PhoneNumberCreateInput
}
export type PhoneNumberUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof PhoneNumberUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PhoneNumberScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  payload?: string | null
  payload_not?: string | null
  payload_in?: string[]
  payload_not_in?: string[]
  payload_lt?: string | null
  payload_lte?: string | null
  payload_gt?: string | null
  payload_gte?: string | null
  payload_contains?: string | null
  payload_not_contains?: string | null
  payload_starts_with?: string | null
  payload_not_starts_with?: string | null
  payload_ends_with?: string | null
  payload_not_ends_with?: string | null
  AND?: PhoneNumberScalarWhereInput[]
  OR?: PhoneNumberScalarWhereInput[]
  NOT?: PhoneNumberScalarWhereInput[]
}
export type PhoneNumberScalarWhereInputInputObject =
  | Extract<keyof PhoneNumberScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'payload', alias?: string  } 
  | { name: 'payload_not', alias?: string  } 
  | { name: 'payload_in', alias?: string  } 
  | { name: 'payload_not_in', alias?: string  } 
  | { name: 'payload_lt', alias?: string  } 
  | { name: 'payload_lte', alias?: string  } 
  | { name: 'payload_gt', alias?: string  } 
  | { name: 'payload_gte', alias?: string  } 
  | { name: 'payload_contains', alias?: string  } 
  | { name: 'payload_not_contains', alias?: string  } 
  | { name: 'payload_starts_with', alias?: string  } 
  | { name: 'payload_not_starts_with', alias?: string  } 
  | { name: 'payload_ends_with', alias?: string  } 
  | { name: 'payload_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PhoneNumberUpdateManyWithWhereNestedInput {
  where?: PhoneNumberScalarWhereInput
  data?: PhoneNumberUpdateManyDataInput
}
export type PhoneNumberUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PhoneNumberUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PhoneNumberUpdateManyDataInput {
  payload?: string | null
}
export type PhoneNumberUpdateManyDataInputInputObject =
  | Extract<keyof PhoneNumberUpdateManyDataInput, string>
  | { name: 'payload', alias?: string  } 
  
export interface GovernmentActorProfileUpsertNestedInput {
  update?: GovernmentActorProfileUpdateDataInput
  create?: GovernmentActorProfileCreateInput
}
export type GovernmentActorProfileUpsertNestedInputInputObject =
  | Extract<keyof GovernmentActorProfileUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AffiliationUpdateManyWithoutActorInput {
  create?: AffiliationCreateWithoutActorInput[]
  delete?: AffiliationWhereUniqueInput[]
  connect?: AffiliationWhereUniqueInput[]
  set?: AffiliationWhereUniqueInput[]
  disconnect?: AffiliationWhereUniqueInput[]
  update?: AffiliationUpdateWithWhereUniqueWithoutActorInput[]
  upsert?: AffiliationUpsertWithWhereUniqueWithoutActorInput[]
  deleteMany?: AffiliationScalarWhereInput[]
  updateMany?: AffiliationUpdateManyWithWhereNestedInput[]
}
export type AffiliationUpdateManyWithoutActorInputInputObject =
  | Extract<keyof AffiliationUpdateManyWithoutActorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AffiliationUpdateWithWhereUniqueWithoutActorInput {
  where?: AffiliationWhereUniqueInput
  data?: AffiliationUpdateWithoutActorDataInput
}
export type AffiliationUpdateWithWhereUniqueWithoutActorInputInputObject =
  | Extract<keyof AffiliationUpdateWithWhereUniqueWithoutActorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AffiliationUpdateWithoutActorDataInput {
  body?: GovernmentBodyUpdateOneRequiredInput | null
  dateStarted?: string | null
  dateEnded?: string | null
  role?: AffiliationRoleUpdateOneInput | null
  notes?: undefined | null
}
export type AffiliationUpdateWithoutActorDataInputInputObject =
  | Extract<keyof AffiliationUpdateWithoutActorDataInput, string>
  | { name: 'body', alias?: string  } 
  | { name: 'dateStarted', alias?: string  } 
  | { name: 'dateEnded', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notes', alias?: string  } 
  
export interface GovernmentBodyUpdateOneRequiredInput {
  create?: GovernmentBodyCreateInput | null
  update?: GovernmentBodyUpdateDataInput | null
  upsert?: GovernmentBodyUpsertNestedInput | null
  connect?: GovernmentBodyWhereUniqueInput | null
}
export type GovernmentBodyUpdateOneRequiredInputInputObject =
  | Extract<keyof GovernmentBodyUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentBodyUpdateDataInput {
  facilities?: GovernmentFacilityUpdateManyInput | null
  name?: string | null
  abbr?: string | null
  parent?: GovernmentBodyUpdateOneWithoutParentInput | null
  children?: GovernmentBodyUpdateManyWithoutChildrenInput | null
  metadata?: GovernmentBodyMetadataUpdateOneRequiredInput | null
}
export type GovernmentBodyUpdateDataInputInputObject =
  | Extract<keyof GovernmentBodyUpdateDataInput, string>
  | { name: 'facilities', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface GovernmentFacilityUpdateManyInput {
  create?: GovernmentFacilityCreateInput[]
  update?: GovernmentFacilityUpdateWithWhereUniqueNestedInput[]
  upsert?: GovernmentFacilityUpsertWithWhereUniqueNestedInput[]
  delete?: GovernmentFacilityWhereUniqueInput[]
  connect?: GovernmentFacilityWhereUniqueInput[]
  set?: GovernmentFacilityWhereUniqueInput[]
  disconnect?: GovernmentFacilityWhereUniqueInput[]
  deleteMany?: GovernmentFacilityScalarWhereInput[]
  updateMany?: GovernmentFacilityUpdateManyWithWhereNestedInput[]
}
export type GovernmentFacilityUpdateManyInputInputObject =
  | Extract<keyof GovernmentFacilityUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GovernmentFacilityUpdateWithWhereUniqueNestedInput {
  where?: GovernmentFacilityWhereUniqueInput
  data?: GovernmentFacilityUpdateDataInput
}
export type GovernmentFacilityUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof GovernmentFacilityUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GovernmentFacilityUpdateDataInput {
  name?: string | null
  type?: prisma.GovernmentFacilityType | null
  location?: LocationUpdateOneRequiredInput | null
  actors?: GovernmentActorUpdateManyInput | null
  phone?: PhoneNumberUpdateOneInput | null
  fax?: PhoneNumberUpdateOneInput | null
  email?: EmailAddressUpdateOneInput | null
  url?: ExternalLinkUpdateOneInput | null
  metadata?: FacilityMetadataUpdateOneRequiredInput | null
}
export type GovernmentFacilityUpdateDataInputInputObject =
  | Extract<keyof GovernmentFacilityUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'actors', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'fax', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface PhoneNumberUpdateOneInput {
  create?: PhoneNumberCreateInput | null
  update?: PhoneNumberUpdateDataInput | null
  upsert?: PhoneNumberUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: PhoneNumberWhereUniqueInput | null
}
export type PhoneNumberUpdateOneInputInputObject =
  | Extract<keyof PhoneNumberUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PhoneNumberUpsertNestedInput {
  update?: PhoneNumberUpdateDataInput
  create?: PhoneNumberCreateInput
}
export type PhoneNumberUpsertNestedInputInputObject =
  | Extract<keyof PhoneNumberUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EmailAddressUpdateOneInput {
  create?: EmailAddressCreateInput | null
  update?: EmailAddressUpdateDataInput | null
  upsert?: EmailAddressUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: EmailAddressWhereUniqueInput | null
}
export type EmailAddressUpdateOneInputInputObject =
  | Extract<keyof EmailAddressUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmailAddressUpsertNestedInput {
  update?: EmailAddressUpdateDataInput
  create?: EmailAddressCreateInput
}
export type EmailAddressUpsertNestedInputInputObject =
  | Extract<keyof EmailAddressUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ExternalLinkUpdateOneInput {
  create?: ExternalLinkCreateInput | null
  update?: ExternalLinkUpdateDataInput | null
  upsert?: ExternalLinkUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ExternalLinkWhereUniqueInput | null
}
export type ExternalLinkUpdateOneInputInputObject =
  | Extract<keyof ExternalLinkUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ExternalLinkUpdateDataInput {
  payload?: string | null
  metadata?: ContactMetadataUpdateOneRequiredInput | null
}
export type ExternalLinkUpdateDataInputInputObject =
  | Extract<keyof ExternalLinkUpdateDataInput, string>
  | { name: 'payload', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface ExternalLinkUpsertNestedInput {
  update?: ExternalLinkUpdateDataInput
  create?: ExternalLinkCreateInput
}
export type ExternalLinkUpsertNestedInputInputObject =
  | Extract<keyof ExternalLinkUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FacilityMetadataUpdateOneRequiredInput {
  create?: FacilityMetadataCreateInput | null
  update?: FacilityMetadataUpdateDataInput | null
  upsert?: FacilityMetadataUpsertNestedInput | null
  connect?: FacilityMetadataWhereUniqueInput | null
}
export type FacilityMetadataUpdateOneRequiredInputInputObject =
  | Extract<keyof FacilityMetadataUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FacilityMetadataUpdateDataInput {
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type FacilityMetadataUpdateDataInputInputObject =
  | Extract<keyof FacilityMetadataUpdateDataInput, string>
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface FacilityMetadataUpsertNestedInput {
  update?: FacilityMetadataUpdateDataInput
  create?: FacilityMetadataCreateInput
}
export type FacilityMetadataUpsertNestedInputInputObject =
  | Extract<keyof FacilityMetadataUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GovernmentFacilityUpsertWithWhereUniqueNestedInput {
  where?: GovernmentFacilityWhereUniqueInput
  update?: GovernmentFacilityUpdateDataInput
  create?: GovernmentFacilityCreateInput
}
export type GovernmentFacilityUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof GovernmentFacilityUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GovernmentFacilityScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  type?: prisma.GovernmentFacilityType | null
  type_not?: prisma.GovernmentFacilityType | null
  type_in?: prisma.GovernmentFacilityType[]
  type_not_in?: prisma.GovernmentFacilityType[]
  AND?: GovernmentFacilityScalarWhereInput[]
  OR?: GovernmentFacilityScalarWhereInput[]
  NOT?: GovernmentFacilityScalarWhereInput[]
}
export type GovernmentFacilityScalarWhereInputInputObject =
  | Extract<keyof GovernmentFacilityScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentFacilityUpdateManyWithWhereNestedInput {
  where?: GovernmentFacilityScalarWhereInput
  data?: GovernmentFacilityUpdateManyDataInput
}
export type GovernmentFacilityUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GovernmentFacilityUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GovernmentFacilityUpdateManyDataInput {
  name?: string | null
  type?: prisma.GovernmentFacilityType | null
}
export type GovernmentFacilityUpdateManyDataInputInputObject =
  | Extract<keyof GovernmentFacilityUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface GovernmentBodyUpdateOneWithoutParentInput {
  create?: GovernmentBodyCreateWithoutParentInput | null
  update?: GovernmentBodyUpdateWithoutParentDataInput | null
  upsert?: GovernmentBodyUpsertWithoutParentInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: GovernmentBodyWhereUniqueInput | null
}
export type GovernmentBodyUpdateOneWithoutParentInputInputObject =
  | Extract<keyof GovernmentBodyUpdateOneWithoutParentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentBodyUpdateWithoutParentDataInput {
  facilities?: GovernmentFacilityUpdateManyInput | null
  name?: string | null
  abbr?: string | null
  children?: GovernmentBodyUpdateManyWithoutChildrenInput | null
  metadata?: GovernmentBodyMetadataUpdateOneRequiredInput | null
}
export type GovernmentBodyUpdateWithoutParentDataInputInputObject =
  | Extract<keyof GovernmentBodyUpdateWithoutParentDataInput, string>
  | { name: 'facilities', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'children', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface GovernmentBodyUpdateManyWithoutChildrenInput {
  create?: GovernmentBodyCreateWithoutChildrenInput[]
  delete?: GovernmentBodyWhereUniqueInput[]
  connect?: GovernmentBodyWhereUniqueInput[]
  set?: GovernmentBodyWhereUniqueInput[]
  disconnect?: GovernmentBodyWhereUniqueInput[]
  update?: GovernmentBodyUpdateWithWhereUniqueWithoutChildrenInput[]
  upsert?: GovernmentBodyUpsertWithWhereUniqueWithoutChildrenInput[]
  deleteMany?: GovernmentBodyScalarWhereInput[]
  updateMany?: GovernmentBodyUpdateManyWithWhereNestedInput[]
}
export type GovernmentBodyUpdateManyWithoutChildrenInputInputObject =
  | Extract<keyof GovernmentBodyUpdateManyWithoutChildrenInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GovernmentBodyUpdateWithWhereUniqueWithoutChildrenInput {
  where?: GovernmentBodyWhereUniqueInput
  data?: GovernmentBodyUpdateWithoutChildrenDataInput
}
export type GovernmentBodyUpdateWithWhereUniqueWithoutChildrenInputInputObject =
  | Extract<keyof GovernmentBodyUpdateWithWhereUniqueWithoutChildrenInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GovernmentBodyUpdateWithoutChildrenDataInput {
  facilities?: GovernmentFacilityUpdateManyInput | null
  name?: string | null
  abbr?: string | null
  parent?: GovernmentBodyUpdateOneWithoutParentInput | null
  metadata?: GovernmentBodyMetadataUpdateOneRequiredInput | null
}
export type GovernmentBodyUpdateWithoutChildrenDataInputInputObject =
  | Extract<keyof GovernmentBodyUpdateWithoutChildrenDataInput, string>
  | { name: 'facilities', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface GovernmentBodyMetadataUpdateOneRequiredInput {
  create?: GovernmentBodyMetadataCreateInput | null
  update?: GovernmentBodyMetadataUpdateDataInput | null
  upsert?: GovernmentBodyMetadataUpsertNestedInput | null
  connect?: GovernmentBodyMetadataWhereUniqueInput | null
}
export type GovernmentBodyMetadataUpdateOneRequiredInputInputObject =
  | Extract<keyof GovernmentBodyMetadataUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentBodyMetadataUpdateDataInput {
  hasChildren?: boolean | null
  hasParent?: boolean | null
}
export type GovernmentBodyMetadataUpdateDataInputInputObject =
  | Extract<keyof GovernmentBodyMetadataUpdateDataInput, string>
  | { name: 'hasChildren', alias?: string  } 
  | { name: 'hasParent', alias?: string  } 
  
export interface GovernmentBodyMetadataUpsertNestedInput {
  update?: GovernmentBodyMetadataUpdateDataInput
  create?: GovernmentBodyMetadataCreateInput
}
export type GovernmentBodyMetadataUpsertNestedInputInputObject =
  | Extract<keyof GovernmentBodyMetadataUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GovernmentBodyUpsertWithWhereUniqueWithoutChildrenInput {
  where?: GovernmentBodyWhereUniqueInput
  update?: GovernmentBodyUpdateWithoutChildrenDataInput
  create?: GovernmentBodyCreateWithoutChildrenInput
}
export type GovernmentBodyUpsertWithWhereUniqueWithoutChildrenInputInputObject =
  | Extract<keyof GovernmentBodyUpsertWithWhereUniqueWithoutChildrenInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GovernmentBodyScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  abbr?: string | null
  abbr_not?: string | null
  abbr_in?: string[]
  abbr_not_in?: string[]
  abbr_lt?: string | null
  abbr_lte?: string | null
  abbr_gt?: string | null
  abbr_gte?: string | null
  abbr_contains?: string | null
  abbr_not_contains?: string | null
  abbr_starts_with?: string | null
  abbr_not_starts_with?: string | null
  abbr_ends_with?: string | null
  abbr_not_ends_with?: string | null
  AND?: GovernmentBodyScalarWhereInput[]
  OR?: GovernmentBodyScalarWhereInput[]
  NOT?: GovernmentBodyScalarWhereInput[]
}
export type GovernmentBodyScalarWhereInputInputObject =
  | Extract<keyof GovernmentBodyScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'abbr_not', alias?: string  } 
  | { name: 'abbr_in', alias?: string  } 
  | { name: 'abbr_not_in', alias?: string  } 
  | { name: 'abbr_lt', alias?: string  } 
  | { name: 'abbr_lte', alias?: string  } 
  | { name: 'abbr_gt', alias?: string  } 
  | { name: 'abbr_gte', alias?: string  } 
  | { name: 'abbr_contains', alias?: string  } 
  | { name: 'abbr_not_contains', alias?: string  } 
  | { name: 'abbr_starts_with', alias?: string  } 
  | { name: 'abbr_not_starts_with', alias?: string  } 
  | { name: 'abbr_ends_with', alias?: string  } 
  | { name: 'abbr_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentBodyUpdateManyWithWhereNestedInput {
  where?: GovernmentBodyScalarWhereInput
  data?: GovernmentBodyUpdateManyDataInput
}
export type GovernmentBodyUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GovernmentBodyUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GovernmentBodyUpdateManyDataInput {
  name?: string | null
  abbr?: string | null
}
export type GovernmentBodyUpdateManyDataInputInputObject =
  | Extract<keyof GovernmentBodyUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  
export interface GovernmentBodyUpsertWithoutParentInput {
  update?: GovernmentBodyUpdateWithoutParentDataInput
  create?: GovernmentBodyCreateWithoutParentInput
}
export type GovernmentBodyUpsertWithoutParentInputInputObject =
  | Extract<keyof GovernmentBodyUpsertWithoutParentInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GovernmentBodyUpsertNestedInput {
  update?: GovernmentBodyUpdateDataInput
  create?: GovernmentBodyCreateInput
}
export type GovernmentBodyUpsertNestedInputInputObject =
  | Extract<keyof GovernmentBodyUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AffiliationRoleUpdateOneInput {
  create?: AffiliationRoleCreateInput | null
  update?: AffiliationRoleUpdateDataInput | null
  upsert?: AffiliationRoleUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: AffiliationRoleWhereUniqueInput | null
}
export type AffiliationRoleUpdateOneInputInputObject =
  | Extract<keyof AffiliationRoleUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AffiliationRoleUpdateDataInput {
  body?: GovernmentBodyUpdateOneRequiredInput | null
  abbr?: string | null
  name?: string | null
}
export type AffiliationRoleUpdateDataInputInputObject =
  | Extract<keyof AffiliationRoleUpdateDataInput, string>
  | { name: 'body', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface AffiliationRoleUpsertNestedInput {
  update?: AffiliationRoleUpdateDataInput
  create?: AffiliationRoleCreateInput
}
export type AffiliationRoleUpsertNestedInputInputObject =
  | Extract<keyof AffiliationRoleUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AffiliationUpsertWithWhereUniqueWithoutActorInput {
  where?: AffiliationWhereUniqueInput
  update?: AffiliationUpdateWithoutActorDataInput
  create?: AffiliationCreateWithoutActorInput
}
export type AffiliationUpsertWithWhereUniqueWithoutActorInputInputObject =
  | Extract<keyof AffiliationUpsertWithWhereUniqueWithoutActorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AffiliationScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  dateStarted?: string | null
  dateStarted_not?: string | null
  dateStarted_in?: string[]
  dateStarted_not_in?: string[]
  dateStarted_lt?: string | null
  dateStarted_lte?: string | null
  dateStarted_gt?: string | null
  dateStarted_gte?: string | null
  dateEnded?: string | null
  dateEnded_not?: string | null
  dateEnded_in?: string[]
  dateEnded_not_in?: string[]
  dateEnded_lt?: string | null
  dateEnded_lte?: string | null
  dateEnded_gt?: string | null
  dateEnded_gte?: string | null
  AND?: AffiliationScalarWhereInput[]
  OR?: AffiliationScalarWhereInput[]
  NOT?: AffiliationScalarWhereInput[]
}
export type AffiliationScalarWhereInputInputObject =
  | Extract<keyof AffiliationScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'dateStarted', alias?: string  } 
  | { name: 'dateStarted_not', alias?: string  } 
  | { name: 'dateStarted_in', alias?: string  } 
  | { name: 'dateStarted_not_in', alias?: string  } 
  | { name: 'dateStarted_lt', alias?: string  } 
  | { name: 'dateStarted_lte', alias?: string  } 
  | { name: 'dateStarted_gt', alias?: string  } 
  | { name: 'dateStarted_gte', alias?: string  } 
  | { name: 'dateEnded', alias?: string  } 
  | { name: 'dateEnded_not', alias?: string  } 
  | { name: 'dateEnded_in', alias?: string  } 
  | { name: 'dateEnded_not_in', alias?: string  } 
  | { name: 'dateEnded_lt', alias?: string  } 
  | { name: 'dateEnded_lte', alias?: string  } 
  | { name: 'dateEnded_gt', alias?: string  } 
  | { name: 'dateEnded_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AffiliationUpdateManyWithWhereNestedInput {
  where?: AffiliationScalarWhereInput
  data?: AffiliationUpdateManyDataInput
}
export type AffiliationUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AffiliationUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AffiliationUpdateManyDataInput {
  dateStarted?: string | null
  dateEnded?: string | null
  notes?: undefined | null
}
export type AffiliationUpdateManyDataInputInputObject =
  | Extract<keyof AffiliationUpdateManyDataInput, string>
  | { name: 'dateStarted', alias?: string  } 
  | { name: 'dateEnded', alias?: string  } 
  | { name: 'notes', alias?: string  } 
  
export interface GovernmentActorUpsertWithWhereUniqueNestedInput {
  where?: GovernmentActorWhereUniqueInput
  update?: GovernmentActorUpdateDataInput
  create?: GovernmentActorCreateInput
}
export type GovernmentActorUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof GovernmentActorUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GovernmentActorScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: GovernmentActorScalarWhereInput[]
  OR?: GovernmentActorScalarWhereInput[]
  NOT?: GovernmentActorScalarWhereInput[]
}
export type GovernmentActorScalarWhereInputInputObject =
  | Extract<keyof GovernmentActorScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentFacilityUpdateManyMutationInput {
  name?: string | null
  type?: prisma.GovernmentFacilityType | null
}
export type GovernmentFacilityUpdateManyMutationInputInputObject =
  | Extract<keyof GovernmentFacilityUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface FacilityMetadataUpdateInput {
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type FacilityMetadataUpdateInputInputObject =
  | Extract<keyof FacilityMetadataUpdateInput, string>
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface FacilityMetadataUpdateManyMutationInput {
  isPrimary?: boolean | null
  isPublic?: boolean | null
  isVerified?: boolean | null
}
export type FacilityMetadataUpdateManyMutationInputInputObject =
  | Extract<keyof FacilityMetadataUpdateManyMutationInput, string>
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPublic', alias?: string  } 
  | { name: 'isVerified', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  handle?: string | null
  cognitoId?: string
  profile?: UserProfileCreateOneWithoutUserInput
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'cognitoId', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  
export interface UserProfileCreateOneWithoutUserInput {
  create?: UserProfileCreateWithoutUserInput | null
  connect?: UserProfileWhereUniqueInput | null
}
export type UserProfileCreateOneWithoutUserInputInputObject =
  | Extract<keyof UserProfileCreateOneWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserProfileCreateWithoutUserInput {
  id?: string | null
  firstName?: string | null
  lastName?: string | null
  avatar?: string | null
  location?: string | null
  email?: EmailAddressCreateManyInput | null
  phone_number?: PhoneNumberCreateManyInput | null
}
export type UserProfileCreateWithoutUserInputInputObject =
  | Extract<keyof UserProfileCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone_number', alias?: string  } 
  
export interface UserUpdateInput {
  handle?: string | null
  cognitoId?: string | null
  profile?: UserProfileUpdateOneRequiredWithoutUserInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'handle', alias?: string  } 
  | { name: 'cognitoId', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  
export interface UserProfileUpdateOneRequiredWithoutUserInput {
  create?: UserProfileCreateWithoutUserInput | null
  update?: UserProfileUpdateWithoutUserDataInput | null
  upsert?: UserProfileUpsertWithoutUserInput | null
  connect?: UserProfileWhereUniqueInput | null
}
export type UserProfileUpdateOneRequiredWithoutUserInputInputObject =
  | Extract<keyof UserProfileUpdateOneRequiredWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserProfileUpdateWithoutUserDataInput {
  firstName?: string | null
  lastName?: string | null
  avatar?: string | null
  location?: string | null
  email?: EmailAddressUpdateManyInput | null
  phone_number?: PhoneNumberUpdateManyInput | null
}
export type UserProfileUpdateWithoutUserDataInputInputObject =
  | Extract<keyof UserProfileUpdateWithoutUserDataInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone_number', alias?: string  } 
  
export interface UserProfileUpsertWithoutUserInput {
  update?: UserProfileUpdateWithoutUserDataInput
  create?: UserProfileCreateWithoutUserInput
}
export type UserProfileUpsertWithoutUserInputInputObject =
  | Extract<keyof UserProfileUpsertWithoutUserInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  handle?: string | null
  cognitoId?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'handle', alias?: string  } 
  | { name: 'cognitoId', alias?: string  } 
  
export interface UserProfileCreateInput {
  id?: string | null
  user?: UserCreateOneWithoutProfileInput
  firstName?: string | null
  lastName?: string | null
  avatar?: string | null
  location?: string | null
  email?: EmailAddressCreateManyInput | null
  phone_number?: PhoneNumberCreateManyInput | null
}
export type UserProfileCreateInputInputObject =
  | Extract<keyof UserProfileCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone_number', alias?: string  } 
  
export interface UserCreateOneWithoutProfileInput {
  create?: UserCreateWithoutProfileInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutProfileInputInputObject =
  | Extract<keyof UserCreateOneWithoutProfileInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutProfileInput {
  id?: string | null
  handle?: string | null
  cognitoId?: string
}
export type UserCreateWithoutProfileInputInputObject =
  | Extract<keyof UserCreateWithoutProfileInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'cognitoId', alias?: string  } 
  
export interface UserProfileUpdateInput {
  user?: UserUpdateOneRequiredWithoutProfileInput | null
  firstName?: string | null
  lastName?: string | null
  avatar?: string | null
  location?: string | null
  email?: EmailAddressUpdateManyInput | null
  phone_number?: PhoneNumberUpdateManyInput | null
}
export type UserProfileUpdateInputInputObject =
  | Extract<keyof UserProfileUpdateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone_number', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutProfileInput {
  create?: UserCreateWithoutProfileInput | null
  update?: UserUpdateWithoutProfileDataInput | null
  upsert?: UserUpsertWithoutProfileInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutProfileInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutProfileInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutProfileDataInput {
  handle?: string | null
  cognitoId?: string | null
}
export type UserUpdateWithoutProfileDataInputInputObject =
  | Extract<keyof UserUpdateWithoutProfileDataInput, string>
  | { name: 'handle', alias?: string  } 
  | { name: 'cognitoId', alias?: string  } 
  
export interface UserUpsertWithoutProfileInput {
  update?: UserUpdateWithoutProfileDataInput
  create?: UserCreateWithoutProfileInput
}
export type UserUpsertWithoutProfileInputInputObject =
  | Extract<keyof UserUpsertWithoutProfileInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserProfileUpdateManyMutationInput {
  firstName?: string | null
  lastName?: string | null
  avatar?: string | null
  location?: string | null
}
export type UserProfileUpdateManyMutationInputInputObject =
  | Extract<keyof UserProfileUpdateManyMutationInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface GovernmentBodyUpdateInput {
  facilities?: GovernmentFacilityUpdateManyInput | null
  name?: string | null
  abbr?: string | null
  parent?: GovernmentBodyUpdateOneWithoutParentInput | null
  children?: GovernmentBodyUpdateManyWithoutChildrenInput | null
  metadata?: GovernmentBodyMetadataUpdateOneRequiredInput | null
}
export type GovernmentBodyUpdateInputInputObject =
  | Extract<keyof GovernmentBodyUpdateInput, string>
  | { name: 'facilities', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  | { name: 'metadata', alias?: string  } 
  
export interface GovernmentBodyUpdateManyMutationInput {
  name?: string | null
  abbr?: string | null
}
export type GovernmentBodyUpdateManyMutationInputInputObject =
  | Extract<keyof GovernmentBodyUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  
export interface GovernmentActorUpdateInput {
  profile?: GovernmentActorProfileUpdateOneRequiredInput | null
  affiliations?: AffiliationUpdateManyWithoutActorInput | null
}
export type GovernmentActorUpdateInputInputObject =
  | Extract<keyof GovernmentActorUpdateInput, string>
  | { name: 'profile', alias?: string  } 
  | { name: 'affiliations', alias?: string  } 
  
export interface GovernmentActorProfileUpdateInput {
  firstName?: string | null
  lastName?: string | null
  email?: EmailAddressUpdateManyInput | null
  phone_number?: PhoneNumberUpdateManyInput | null
}
export type GovernmentActorProfileUpdateInputInputObject =
  | Extract<keyof GovernmentActorProfileUpdateInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone_number', alias?: string  } 
  
export interface GovernmentActorProfileUpdateManyMutationInput {
  firstName?: string | null
  lastName?: string | null
}
export type GovernmentActorProfileUpdateManyMutationInputInputObject =
  | Extract<keyof GovernmentActorProfileUpdateManyMutationInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  
export interface GovernmentBodyMetadataUpdateInput {
  hasChildren?: boolean | null
  hasParent?: boolean | null
}
export type GovernmentBodyMetadataUpdateInputInputObject =
  | Extract<keyof GovernmentBodyMetadataUpdateInput, string>
  | { name: 'hasChildren', alias?: string  } 
  | { name: 'hasParent', alias?: string  } 
  
export interface GovernmentBodyMetadataUpdateManyMutationInput {
  hasChildren?: boolean | null
  hasParent?: boolean | null
}
export type GovernmentBodyMetadataUpdateManyMutationInputInputObject =
  | Extract<keyof GovernmentBodyMetadataUpdateManyMutationInput, string>
  | { name: 'hasChildren', alias?: string  } 
  | { name: 'hasParent', alias?: string  } 
  
export interface AffiliationCreateInput {
  id?: string | null
  actor?: GovernmentActorCreateOneWithoutAffiliationsInput
  body?: GovernmentBodyCreateOneInput
  dateStarted?: string
  dateEnded?: string | null
  role?: AffiliationRoleCreateOneInput | null
  notes?: undefined | null
}
export type AffiliationCreateInputInputObject =
  | Extract<keyof AffiliationCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'actor', alias?: string  } 
  | { name: 'body', alias?: string  } 
  | { name: 'dateStarted', alias?: string  } 
  | { name: 'dateEnded', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notes', alias?: string  } 
  
export interface GovernmentActorCreateOneWithoutAffiliationsInput {
  create?: GovernmentActorCreateWithoutAffiliationsInput | null
  connect?: GovernmentActorWhereUniqueInput | null
}
export type GovernmentActorCreateOneWithoutAffiliationsInputInputObject =
  | Extract<keyof GovernmentActorCreateOneWithoutAffiliationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentActorCreateWithoutAffiliationsInput {
  id?: string | null
  profile?: GovernmentActorProfileCreateOneInput
}
export type GovernmentActorCreateWithoutAffiliationsInputInputObject =
  | Extract<keyof GovernmentActorCreateWithoutAffiliationsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  
export interface AffiliationUpdateInput {
  actor?: GovernmentActorUpdateOneRequiredWithoutAffiliationsInput | null
  body?: GovernmentBodyUpdateOneRequiredInput | null
  dateStarted?: string | null
  dateEnded?: string | null
  role?: AffiliationRoleUpdateOneInput | null
  notes?: undefined | null
}
export type AffiliationUpdateInputInputObject =
  | Extract<keyof AffiliationUpdateInput, string>
  | { name: 'actor', alias?: string  } 
  | { name: 'body', alias?: string  } 
  | { name: 'dateStarted', alias?: string  } 
  | { name: 'dateEnded', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notes', alias?: string  } 
  
export interface GovernmentActorUpdateOneRequiredWithoutAffiliationsInput {
  create?: GovernmentActorCreateWithoutAffiliationsInput | null
  update?: GovernmentActorUpdateWithoutAffiliationsDataInput | null
  upsert?: GovernmentActorUpsertWithoutAffiliationsInput | null
  connect?: GovernmentActorWhereUniqueInput | null
}
export type GovernmentActorUpdateOneRequiredWithoutAffiliationsInputInputObject =
  | Extract<keyof GovernmentActorUpdateOneRequiredWithoutAffiliationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GovernmentActorUpdateWithoutAffiliationsDataInput {
  profile?: GovernmentActorProfileUpdateOneRequiredInput | null
}
export type GovernmentActorUpdateWithoutAffiliationsDataInputInputObject =
  | Extract<keyof GovernmentActorUpdateWithoutAffiliationsDataInput, string>
  | { name: 'profile', alias?: string  } 
  
export interface GovernmentActorUpsertWithoutAffiliationsInput {
  update?: GovernmentActorUpdateWithoutAffiliationsDataInput
  create?: GovernmentActorCreateWithoutAffiliationsInput
}
export type GovernmentActorUpsertWithoutAffiliationsInputInputObject =
  | Extract<keyof GovernmentActorUpsertWithoutAffiliationsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AffiliationUpdateManyMutationInput {
  dateStarted?: string | null
  dateEnded?: string | null
  notes?: undefined | null
}
export type AffiliationUpdateManyMutationInputInputObject =
  | Extract<keyof AffiliationUpdateManyMutationInput, string>
  | { name: 'dateStarted', alias?: string  } 
  | { name: 'dateEnded', alias?: string  } 
  | { name: 'notes', alias?: string  } 
  
export interface AffiliationRoleUpdateInput {
  body?: GovernmentBodyUpdateOneRequiredInput | null
  abbr?: string | null
  name?: string | null
}
export type AffiliationRoleUpdateInputInputObject =
  | Extract<keyof AffiliationRoleUpdateInput, string>
  | { name: 'body', alias?: string  } 
  | { name: 'abbr', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface AffiliationRoleUpdateManyMutationInput {
  abbr?: string | null
  name?: string | null
}
export type AffiliationRoleUpdateManyMutationInputInputObject =
  | Extract<keyof AffiliationRoleUpdateManyMutationInput, string>
  | { name: 'abbr', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface EmailAddressSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EmailAddressWhereInput | null
  AND?: EmailAddressSubscriptionWhereInput[]
  OR?: EmailAddressSubscriptionWhereInput[]
  NOT?: EmailAddressSubscriptionWhereInput[]
}
export type EmailAddressSubscriptionWhereInputInputObject =
  | Extract<keyof EmailAddressSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PhoneNumberSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PhoneNumberWhereInput | null
  AND?: PhoneNumberSubscriptionWhereInput[]
  OR?: PhoneNumberSubscriptionWhereInput[]
  NOT?: PhoneNumberSubscriptionWhereInput[]
}
export type PhoneNumberSubscriptionWhereInputInputObject =
  | Extract<keyof PhoneNumberSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ExternalLinkSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ExternalLinkWhereInput | null
  AND?: ExternalLinkSubscriptionWhereInput[]
  OR?: ExternalLinkSubscriptionWhereInput[]
  NOT?: ExternalLinkSubscriptionWhereInput[]
}
export type ExternalLinkSubscriptionWhereInputInputObject =
  | Extract<keyof ExternalLinkSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ContactMetadataSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ContactMetadataWhereInput | null
  AND?: ContactMetadataSubscriptionWhereInput[]
  OR?: ContactMetadataSubscriptionWhereInput[]
  NOT?: ContactMetadataSubscriptionWhereInput[]
}
export type ContactMetadataSubscriptionWhereInputInputObject =
  | Extract<keyof ContactMetadataSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LocationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LocationWhereInput | null
  AND?: LocationSubscriptionWhereInput[]
  OR?: LocationSubscriptionWhereInput[]
  NOT?: LocationSubscriptionWhereInput[]
}
export type LocationSubscriptionWhereInputInputObject =
  | Extract<keyof LocationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LocationMetadataSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LocationMetadataWhereInput | null
  AND?: LocationMetadataSubscriptionWhereInput[]
  OR?: LocationMetadataSubscriptionWhereInput[]
  NOT?: LocationMetadataSubscriptionWhereInput[]
}
export type LocationMetadataSubscriptionWhereInputInputObject =
  | Extract<keyof LocationMetadataSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GeometrySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GeometryWhereInput | null
  AND?: GeometrySubscriptionWhereInput[]
  OR?: GeometrySubscriptionWhereInput[]
  NOT?: GeometrySubscriptionWhereInput[]
}
export type GeometrySubscriptionWhereInputInputObject =
  | Extract<keyof GeometrySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentFacilitySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GovernmentFacilityWhereInput | null
  AND?: GovernmentFacilitySubscriptionWhereInput[]
  OR?: GovernmentFacilitySubscriptionWhereInput[]
  NOT?: GovernmentFacilitySubscriptionWhereInput[]
}
export type GovernmentFacilitySubscriptionWhereInputInputObject =
  | Extract<keyof GovernmentFacilitySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FacilityMetadataSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FacilityMetadataWhereInput | null
  AND?: FacilityMetadataSubscriptionWhereInput[]
  OR?: FacilityMetadataSubscriptionWhereInput[]
  NOT?: FacilityMetadataSubscriptionWhereInput[]
}
export type FacilityMetadataSubscriptionWhereInputInputObject =
  | Extract<keyof FacilityMetadataSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserProfileSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserProfileWhereInput | null
  AND?: UserProfileSubscriptionWhereInput[]
  OR?: UserProfileSubscriptionWhereInput[]
  NOT?: UserProfileSubscriptionWhereInput[]
}
export type UserProfileSubscriptionWhereInputInputObject =
  | Extract<keyof UserProfileSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentBodySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GovernmentBodyWhereInput | null
  AND?: GovernmentBodySubscriptionWhereInput[]
  OR?: GovernmentBodySubscriptionWhereInput[]
  NOT?: GovernmentBodySubscriptionWhereInput[]
}
export type GovernmentBodySubscriptionWhereInputInputObject =
  | Extract<keyof GovernmentBodySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentActorSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GovernmentActorWhereInput | null
  AND?: GovernmentActorSubscriptionWhereInput[]
  OR?: GovernmentActorSubscriptionWhereInput[]
  NOT?: GovernmentActorSubscriptionWhereInput[]
}
export type GovernmentActorSubscriptionWhereInputInputObject =
  | Extract<keyof GovernmentActorSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentActorProfileSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GovernmentActorProfileWhereInput | null
  AND?: GovernmentActorProfileSubscriptionWhereInput[]
  OR?: GovernmentActorProfileSubscriptionWhereInput[]
  NOT?: GovernmentActorProfileSubscriptionWhereInput[]
}
export type GovernmentActorProfileSubscriptionWhereInputInputObject =
  | Extract<keyof GovernmentActorProfileSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GovernmentBodyMetadataSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GovernmentBodyMetadataWhereInput | null
  AND?: GovernmentBodyMetadataSubscriptionWhereInput[]
  OR?: GovernmentBodyMetadataSubscriptionWhereInput[]
  NOT?: GovernmentBodyMetadataSubscriptionWhereInput[]
}
export type GovernmentBodyMetadataSubscriptionWhereInputInputObject =
  | Extract<keyof GovernmentBodyMetadataSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AffiliationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AffiliationWhereInput | null
  AND?: AffiliationSubscriptionWhereInput[]
  OR?: AffiliationSubscriptionWhereInput[]
  NOT?: AffiliationSubscriptionWhereInput[]
}
export type AffiliationSubscriptionWhereInputInputObject =
  | Extract<keyof AffiliationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AffiliationRoleSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AffiliationRoleWhereInput | null
  AND?: AffiliationRoleSubscriptionWhereInput[]
  OR?: AffiliationRoleSubscriptionWhereInput[]
  NOT?: AffiliationRoleSubscriptionWhereInput[]
}
export type AffiliationRoleSubscriptionWhereInputInputObject =
  | Extract<keyof AffiliationRoleSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type EmailAddressOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'payload_ASC'
  | 'payload_DESC'
  
export type PhoneNumberOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'payload_ASC'
  | 'payload_DESC'
  
export type ExternalLinkOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'payload_ASC'
  | 'payload_DESC'
  
export type ContactMetadataOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'isPrimary_ASC'
  | 'isPrimary_DESC'
  | 'isPublic_ASC'
  | 'isPublic_DESC'
  | 'isVerified_ASC'
  | 'isVerified_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type LocationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'formatted_address_ASC'
  | 'formatted_address_DESC'
  | 'googleId_ASC'
  | 'googleId_DESC'
  | 'placeId_ASC'
  | 'placeId_DESC'
  
export type LocationMetadataOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'isPrimary_ASC'
  | 'isPrimary_DESC'
  | 'isPublic_ASC'
  | 'isPublic_DESC'
  | 'isVerified_ASC'
  | 'isVerified_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GeometryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'lat_ASC'
  | 'lat_DESC'
  | 'lng_ASC'
  | 'lng_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GovernmentFacilityTypeValues =
  | 'DETENTION_CENTER'
  | 'FIELD_OFFICE'
  | 'COURT'
  
export type GovernmentActorOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AffiliationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'dateStarted_ASC'
  | 'dateStarted_DESC'
  | 'dateEnded_ASC'
  | 'dateEnded_DESC'
  | 'notes_ASC'
  | 'notes_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GovernmentFacilityOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'type_ASC'
  | 'type_DESC'
  
export type GovernmentBodyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'abbr_ASC'
  | 'abbr_DESC'
  
export type FacilityMetadataOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'isPrimary_ASC'
  | 'isPrimary_DESC'
  | 'isPublic_ASC'
  | 'isPublic_DESC'
  | 'isVerified_ASC'
  | 'isVerified_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'handle_ASC'
  | 'handle_DESC'
  | 'cognitoId_ASC'
  | 'cognitoId_DESC'
  
export type UserProfileOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'avatar_ASC'
  | 'avatar_DESC'
  | 'location_ASC'
  | 'location_DESC'
  
export type GovernmentActorProfileOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  
export type GovernmentBodyMetadataOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'hasChildren_ASC'
  | 'hasChildren_DESC'
  | 'hasParent_ASC'
  | 'hasParent_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AffiliationRoleOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'abbr_ASC'
  | 'abbr_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  